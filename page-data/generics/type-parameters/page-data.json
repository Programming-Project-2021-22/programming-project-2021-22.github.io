{
    "componentChunkName": "component---src-templates-template-js",
    "path": "/generics/type-parameters",
    "result": {"data":{"markdownRemark":{"html":"<h2 id=\"upper-bound-type-parameters\" style=\"position:relative;\"><a href=\"#upper-bound-type-parameters\" aria-label=\"upper bound type parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Upper-bound type parameters</h2>\n<p>There may be times when you want to restrict the types that can be used as type parameters.</p>\n<p>For example, a method that operates on numbers might only want to accept instances of <code class=\"language-text\">Number</code> or its subclasses. The <code class=\"language-text\">Number</code> class is the superclass of classes <code class=\"language-text\">BigDecimal</code>, <code class=\"language-text\">BigInteger</code>, <code class=\"language-text\">Byte</code>, <code class=\"language-text\">Double</code>, <code class=\"language-text\">Float</code>, <code class=\"language-text\">Integer</code>, <code class=\"language-text\">Long</code>, and <code class=\"language-text\">Short</code>.</p>\n<p>To declare a bounded type parameter, list the type parameter's name, followed by <code class=\"language-text\">extends</code>, followed by its <strong>upper bound</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Number</span> <span class=\"token function\">maximum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> number1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> number2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> number3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here, <code class=\"language-text\">extends</code> is used in a general sense to mean either:</p>\n<ul>\n<li><code class=\"language-text\">extends</code>, as in classes</li>\n<li><code class=\"language-text\">implements</code>, as in interfaces</li>\n</ul>\n<h2 id=\"erasure-and-upper-bound-type-parameters\" style=\"position:relative;\"><a href=\"#erasure-and-upper-bound-type-parameters\" aria-label=\"erasure and upper bound type parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Erasure and upper-bound type parameters</h2>\n<p>This method:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Comparable</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">maximum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> y<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> z<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">T</span> max <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// assume x is initially the largest</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    max <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span> <span class=\"token comment\">// y is the largest so far</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    max <span class=\"token operator\">=</span> z<span class=\"token punctuation\">;</span> <span class=\"token comment\">// z is the largest</span>\n  <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns the largest object</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Becomes:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Comparable</span> <span class=\"token function\">maximum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparable</span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparable</span> y<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparable</span> z<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Comparable</span> max <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> \n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    max <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span> \n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    max <span class=\"token operator\">=</span> z<span class=\"token punctuation\">;</span> \n  <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"exercise\" style=\"position:relative;\"><a href=\"#exercise\" aria-label=\"exercise permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exercise</h2>\n<ol>\n<li>Write a generic method that returns the highest number in a list.</li>\n<li>Infer the declaration from the code below</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> integers <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Max integer: \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span>integers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> longs <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">10L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Max long: \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span>longs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">></span></span> doubles <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Max double: \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span>doubles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- ## Solution\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Exercise2 {\n\n   public static <T extends Number> T getMax(List<T> list) {\n      if (list == null || list.size() == 0)\n         return null;\n\n      T max = list.get(0);\n\n      for (T value : list) {\n         if (max.doubleValue() < value.doubleValue())\n            max = value;\n      }\n\n      return max;\n   }\n\n   public static void main(String[] args) {\n      List<Integer> integers = Arrays.asList(10, 20, 30, 40);\n      System.out.println(\"Max integer: \" + getMax(integers));\n\n      List<Long> longs = Arrays.asList(10L, 20L);\n      System.out.println(\"Max long: \" + getMax(longs));\n\n      List<Double> doubles = Arrays.asList(10.1, 10.2, 10.3, 10.4);\n      System.out.println(\"Max double: \" + getMax(doubles));\n   }\n}\n``` -->\n<h2 id=\"wildcards\" style=\"position:relative;\"><a href=\"#wildcards\" aria-label=\"wildcards permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wildcards</h2>\n<p>In generic code, the question mark <code class=\"language-text\">?</code>, called <strong>wildcard</strong>, represents an unknown type.</p>\n<ul>\n<li>unbounded</li>\n<li>upper bounded</li>\n<li>lower bounded</li>\n</ul>\n<h2 id=\"unbounded-wildcards\" style=\"position:relative;\"><a href=\"#unbounded-wildcards\" aria-label=\"unbounded wildcards permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unbounded wildcards</h2>\n<p>The unbounded wildcard type is specified using the wildcard character (<code class=\"language-text\">?</code>), for example, <code class=\"language-text\">List&lt;?></code>. This is called a list of unknown type.</p>\n<p>There are two scenarios where an unbounded wildcard is a useful approach:</p>\n<ul>\n<li>You are writing a method that can be implemented using functionality provided in the <code class=\"language-text\">Object</code> class.</li>\n<li>You are using methods in the generic class that don't depend on the type parameter. E.g., <code class=\"language-text\">List.size</code> or <code class=\"language-text\">List.clear</code>.</li>\n</ul>\n<p>Here is an example of a method that can be implemented using <code class=\"language-text\">Object::toString()</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> elem <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>elem <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The goal of <code class=\"language-text\">printList</code> is to print a list of any type, but it fails to achieve that goal. It prints only a list of objects, i.e. <code class=\"language-text\">List&lt;Object></code>. It cannot print <code class=\"language-text\">List&lt;Integer></code>, <code class=\"language-text\">List&lt;String></code>, <code class=\"language-text\">List&lt;Double></code>, because they are not subtypes of <code class=\"language-text\">List&lt;Object></code>.</p>\n<p>Instead, if we use a wildcard, it can handle all of these cases:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> elem<span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>elem <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"upper-bounded-wildcards\" style=\"position:relative;\"><a href=\"#upper-bounded-wildcards\" aria-label=\"upper bounded wildcards permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Upper-bounded wildcards</h2>\n<p>You can use an upper bounded wildcard to relax the restrictions on a variable.</p>\n<p>For example, say you want to write a method that works on</p>\n<ul>\n<li><code class=\"language-text\">List&lt;Integer></code>,</li>\n<li><code class=\"language-text\">List&lt;Double></code>, and</li>\n<li><code class=\"language-text\">List&lt;Number></code>.</li>\n</ul>\n<p>You can achieve this by using an upper bounded wildcard.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>But what is the difference between:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>You declare a <code class=\"language-text\">T</code> so that you <strong>can refer to it again</strong>.</p>\n<p>Here is an example in which it is useful to use upper-bounded wildcards:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> list1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> list2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> merged <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  merged<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  merged<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> merged<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Which can later be used as:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> people <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>or as:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> people <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>None of the above would have worked if the collect method had been declared as:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> list1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> list2<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Example from <a href=\"https://softwareengineering.stackexchange.com/questions/303584/what-is-the-difference-between-extends-foo-and-foo\">this</a> StackOverflow answer.</p>\n<h2 id=\"lower-bounded-wildcards\" style=\"position:relative;\"><a href=\"#lower-bounded-wildcards\" aria-label=\"lower bounded wildcards permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lower-bounded wildcards</h2>\n<p>Say you want to write a method that puts Integer objects into a list. To maximize flexibility, you would like the method to work on <strong>anything that can hold Integer values</strong>, that is:</p>\n<ul>\n<li><code class=\"language-text\">List&lt;Integer></code>,</li>\n<li><code class=\"language-text\">List&lt;Number></code>, and</li>\n<li><code class=\"language-text\">List&lt;Object></code></li>\n</ul>\n<p>To write the method that works on lists of <code class=\"language-text\">Integer</code> and the supertypes of <code class=\"language-text\">Integer</code>, such as <code class=\"language-text\">Integer</code>, <code class=\"language-text\">Number</code>, and <code class=\"language-text\">Object</code>, you would specify:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">.</span> </code></pre></div>\n<h2 id=\"t-vs--1\" style=\"position:relative;\"><a href=\"#t-vs--1\" aria-label=\"t vs  1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">&lt;T></code> vs. <code class=\"language-text\">&lt;?></code> (1)</h2>\n<p>Sometimes, wildcards and type parameters do the same thing, but for certain purposes, you will need type parameters:</p>\n<ul>\n<li>To enforce some relation between parameter types</li>\n<li>To bind the a parameter and the return type of a method</li>\n</ul>\n<p>Suppose you want to ensure that the <code class=\"language-text\">src</code> and <code class=\"language-text\">dest</code> lists passed to <code class=\"language-text\">copy()</code> have the same type.</p>\n<p>You can do it with type parameters:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> dest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> src<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Making it safe to copy elements from <code class=\"language-text\">src</code> to <code class=\"language-text\">dest</code>.</p>\n<p>If you were to use a wildcard instead:\\</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> dest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> src<span class=\"token punctuation\">)</span></code></pre></div>\n<p>You would be able to pass <code class=\"language-text\">List&lt;Integer></code> and <code class=\"language-text\">List&lt;Float></code> as <code class=\"language-text\">dest</code> and <code class=\"language-text\">src</code>, making it unsafe to move elements from <code class=\"language-text\">src</code> to <code class=\"language-text\">dest</code>.</p>\n<h2 id=\"t-vs--2\" style=\"position:relative;\"><a href=\"#t-vs--2\" aria-label=\"t vs  2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">&lt;T></code> vs. <code class=\"language-text\">&lt;?></code> (2)</h2>\n<p>Another big difference is that <code class=\"language-text\">&lt;T></code> allows you to <strong>refer to \"T\" within the method</strong> as if the concrete class was given.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">takeThing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">T</span> first <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you had used a wildcard instead, you would not be able to do that:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">takeThing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"slug":"/generics/type-parameters","title":"Bounded and Unbounded Type Parameters","course":"Programming Project 2021/22","previous":"/generics/methods","next":"/generics/classes","chapter":7,"section":3,"module":"Generic Programming","banner":null}}},"pageContext":{"slug":"/generics/type-parameters"}},
    "staticQueryHashes": ["800307450"]}