{
    "componentChunkName": "component---src-templates-template-js",
    "path": "/exceptions/throwing",
    "result": {"data":{"markdownRemark":{"html":"<p>Before you can catch an exception, some code somewhere must throw one.</p>\n<p>Any code can throw an exception:</p>\n<ul>\n<li>your code</li>\n<li>code from a package written by someone (e.g. the packages that come with the Java platform), or</li>\n<li>the Java runtime environment.</li>\n</ul>\n<p><a href=\"https://docs.oracle.com/javase/tutorial/essential/exceptions/throwing.html\">Source</a></p>\n<h2 id=\"the-throw-statement\" style=\"position:relative;\"><a href=\"#the-throw-statement\" aria-label=\"the throw statement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code class=\"language-text\">throw</code> statement</h2>\n<p>Regardless of what throws the exception, it's always thrown with the <code class=\"language-text\">throw</code> statement.</p>\n<p>The <code class=\"language-text\">throw</code> statement requires a single argument: a throwable object.</p>\n<p>Throwable objects are instances of any subclass of the <code class=\"language-text\">Throwable</code> class.</p>\n<p>Here's an example of a throw statement:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">throw</span> someThrowableObject<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, let us look at the <code class=\"language-text\">throw</code> statement in context.</p>\n<p>The following <code class=\"language-text\">pop()</code> method is taken from a class that implements a common stack data structure. The method removes the top element from the stack and returns the object.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EmptyStackException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  obj <span class=\"token operator\">=</span> <span class=\"token function\">objectAt</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setObjectAt</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">pop()</code> method checks to see whether any elements are on the stack.</p>\n<p>If the stack is empty (its <code class=\"language-text\">size</code> is equal to <code class=\"language-text\">0</code>), <code class=\"language-text\">pop()</code> instantiates a new <code class=\"language-text\">EmptyStackException</code> object and throws it.</p>\n<p>Note that the declaration of the <code class=\"language-text\">pop()</code> method does not contain a <code class=\"language-text\">throws</code> clause because <code class=\"language-text\">EmptyStackException</code> is not a checked exception, so pop is not required to state that it might occur.</p>\n<p><a href=\"https://docs.oracle.com/javase/tutorial/essential/exceptions/throwing.html\">Source</a></p>\n<h2 id=\"chained-exceptions\" style=\"position:relative;\"><a href=\"#chained-exceptions\" aria-label=\"chained exceptions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Chained exceptions</h2>\n<p>An application often responds to an exception by throwing another exception. In effect, the first exception causes the second exception. It can be very helpful to know when one exception causes another.</p>\n<p><strong>Chained exceptions</strong> help us do that!</p>\n<p>The following example shows how to use a chained exception.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// some code</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Other IOException\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this example, when an <code class=\"language-text\">IOException</code> is caught, a new <code class=\"language-text\">Exception</code> exception is created with the original cause attached and the chain of exceptions is thrown up to the next higher level exception handler.</p>\n<p>Here is a more extensive example of exception chaining:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exception thrown in method1()\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">method3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exception thrown in method2()\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exception thrown in method3()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that the we will see the chained exceptions in the stack trace:</p>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">java.lang.Exception: Exception thrown in method1()\n\tat UsingChainedExceptions.method1(UsingChainedExceptions.java:15)\n\tat UsingChainedExceptions.main(UsingChainedExceptions.java:5)\nCaused by: java.lang.Exception: Exception thrown in method2()\n\tat UsingChainedExceptions.method2(UsingChainedExceptions.java:23)\n\tat UsingChainedExceptions.method1(UsingChainedExceptions.java:13)\n\t... 1 more\nCaused by: java.lang.Exception: Exception thrown in method3()\n\tat UsingChainedExceptions.method3(UsingChainedExceptions.java:28)\n\tat UsingChainedExceptions.method2(UsingChainedExceptions.java:21)\n\t... 2 more</code></pre></div>\n<p>The following are the methods and constructors in <code class=\"language-text\">Throwable</code> that support chained exceptions.</p>\n<ul>\n<li><code class=\"language-text\">Throwable getCause()</code>: returns the <code class=\"language-text\">Throwable</code> that caused the current <code class=\"language-text\">Throwable</code>.</li>\n<li><code class=\"language-text\">Throwable initCause(Throwable)</code>: sets the current <code class=\"language-text\">Throwable</code>'s cause.</li>\n<li><code class=\"language-text\">Throwable(Throwable)</code>: builds a new <code class=\"language-text\">Throwable</code> ands sets its cause.</li>\n</ul>","frontmatter":{"slug":"/exceptions/throwing","title":"Throwing Exceptions","course":"Programming Project 2021/22","previous":"/exceptions/declaring","next":"/exceptions/custom","chapter":5,"section":4,"module":"Exception Handling","banner":null}}},"pageContext":{"slug":"/exceptions/throwing"}},
    "staticQueryHashes": ["800307450"]}