{
    "componentChunkName": "component---src-templates-template-js",
    "path": "/testing/nested",
    "result": {"data":{"markdownRemark":{"html":"<h2 id=\"nested-tests\" style=\"position:relative;\"><a href=\"#nested-tests\" aria-label=\"nested tests permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nested tests</h2>\n<p>Sometimes, we will find ourselves with a large test class that, for some reason, we don't want to split into multiple files.</p>\n<p>The example below will show you how to use the <code class=\"language-text\">@Nested</code> annotation.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NestedCalculatorTest</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token annotation punctuation\">@Nested</span>\n   <span class=\"token keyword\">class</span> <span class=\"token class-name\">SumTest</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token annotation punctuation\">@Test</span>\n      <span class=\"token keyword\">void</span> <span class=\"token function\">sumPositiveNumbers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token annotation punctuation\">@Test</span>\n      <span class=\"token keyword\">void</span> <span class=\"token function\">sumNegativeNumbers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token annotation punctuation\">@Nested</span>\n   <span class=\"token keyword\">class</span> <span class=\"token class-name\">MultiplicationTest</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token annotation punctuation\">@Test</span>\n      <span class=\"token keyword\">void</span> <span class=\"token function\">positiveMultiplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">.</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token annotation punctuation\">@Test</span>\n      <span class=\"token keyword\">void</span> <span class=\"token function\">negativeMultiplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">.</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"do-we-really-need-nested-test-classes\" style=\"position:relative;\"><a href=\"#do-we-really-need-nested-test-classes\" aria-label=\"do we really need nested test classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Do we really need nested test classes?</h2>\n<p>A <a href=\"https://stackoverflow.com/questions/36220889/whats-the-purpose-of-the-junit-5-nested-annotation\">developer on StackOverflow</a>, does not see the point:</p>\n<blockquote>\n<p>In JUnit 5, there is a new annotation: <code class=\"language-text\">@Nested</code>.</p>\n<p>I understand how the annotation works, I understand why we use nested classes, I just don't understand why we need to have nested test classes.</p>\n</blockquote>\n<p>His question was answered quite in depth:</p>\n<blockquote>\n<p><strong>Typical use case</strong></p>\n<p>Very often, developer teams define a test class by class to test. That is a shared good practice but it also may make your test class very big and to count several hundred of lines. You can indeed have classes to test with multiple methods to test, multiple scenarios for each one and also some initialization steps required in the unit test methods to test the scenarios.\nAll of these will naturally increase the test class size.\nAbove a threshold (maybe 500 lines or about), it becomes legitimate to ask yourself whether a refactoring is needed.</p>\n<p>A big class (test class or not), even well organized is harder to read, maintain than multiple classes grouping things with high cohesion/relationship between.\nIn the unit tests cases, it can be sometime still worse because you may not find a test scenario and write a new one while it existed but you didn't manage to find it because the test class is big.</p>\n<p><strong><code class=\"language-text\">@Nested</code> : the solution</strong></p>\n<p><code class=\"language-text\">@Nested</code> addresses this issue by giving the possibility to group multiple test methods inside multiple nested classes of a main(outer) test class.\n. . .</p>\n</blockquote>\n<p>You can read the rest of this answer <a href=\"https://stackoverflow.com/questions/36220889/whats-the-purpose-of-the-junit-5-nested-annotation\">here</a>.</p>","frontmatter":{"slug":"/testing/nested","title":"Nested Tests","course":"Programming Project 2021/22","previous":"/testing/timeouts","next":"/testing/repeated","chapter":13,"section":7,"module":"Testing","banner":"https://upload.wikimedia.org/wikipedia/commons/5/59/JUnit_5_Banner.png"}}},"pageContext":{"slug":"/testing/nested"}},
    "staticQueryHashes": ["800307450"]}