{
    "componentChunkName": "component---src-templates-template-js",
    "path": "/testing/first",
    "result": {"data":{"markdownRemark":{"html":"<p>Now that we learned how to write tests with JUnit 5, let us focus on what makes a good unit test.</p>\n<p>In this section, we will discuss the FIRST principles, as described in the book: Jeff Langr, Andy Hunt, and Dave Thomas, <strong><a href=\"https://ubz-primo.hosted.exlibrisgroup.com/permalink/f/pok0fm/39UBZ_ALMA_DS51260958870001241\">Pragmatic Unit Testing in Java 8 with JUnit</a></strong>, 2015.</p>\n<p><img src=\"https://images-na.ssl-images-amazon.com/images/I/81EocPQDPiL.jpg\" alt=\"\"></p>\n<p><strong>Note</strong>: This book adopts JUnit 4. We will use it for <em>good testing practices</em>, which are applicable regardless of the version of JUnit you are using (or even your testing framework).</p>\n<h2 id=\"properties-of-good-unit-tests\" style=\"position:relative;\"><a href=\"#properties-of-good-unit-tests\" aria-label=\"properties of good unit tests permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Properties of Good Unit Tests</h2>\n<p>Unit tests provide many significant benefits when crafted with care, but your tests also represent <em>code you must write and maintain</em>.</p>\n<p>You and your team can lose lots of time with your tests because:</p>\n<ul>\n<li>Tests that make little sense to someone following them</li>\n<li>Tests that fail sporadically</li>\n<li>Tests that don’t prove anything worthwhile</li>\n<li>Tests that require a long time to execute</li>\n<li>Tests that don’t sufficiently cover the code</li>\n<li>Tests that couple too tightly to implementation, meaning that small changes break lots of tests all at once</li>\n<li>Convoluted tests that jump through numerous setup hoops</li>\n</ul>\n<h2 id=\"the-first-principles\" style=\"position:relative;\"><a href=\"#the-first-principles\" aria-label=\"the first principles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The FIRST Principles</h2>\n<p>A set of principles to avoid common pitfalls in unit testing:</p>\n<ul>\n<li><strong>F:</strong> Fast</li>\n<li><strong>I</strong>: Isolated</li>\n<li><strong>R:</strong> Repeatable</li>\n<li><strong>S:</strong> Self-validating</li>\n<li><strong>T:</strong> Timely</li>\n</ul>\n<h2 id=\"first-fast\" style=\"position:relative;\"><a href=\"#first-fast\" aria-label=\"first fast permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[F]IRST: Fast</h2>\n<p>It is <strong>fundamental that your unit tests are fast</strong>.</p>\n<p><strong>Fast tests:</strong></p>\n<ul>\n<li>Deal solely in code.</li>\n<li>Take a <strong>few milliseconds</strong> at most to execute.</li>\n</ul>\n<p><strong>Slow tests:</strong></p>\n<ul>\n<li>Interact with <em>code that must handle external evil necessities</em> such as database access, files, and network calls.</li>\n<li>Take <strong>hundreds or thousands of milliseconds</strong>..</li>\n</ul>\n<h3 id=\"in-a-typical-java-system\" style=\"position:relative;\"><a href=\"#in-a-typical-java-system\" aria-label=\"in a typical java system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>In a typical Java system</h3>\n<p>You will probably have a few thousand unit tests.</p>\n<p>If an average test takes 200 ms, running 2,500 unit tests takes <em>8 minutes</em></p>\n<p>Do not expect developers to run an 8-minute test suite too many times throughout a day.</p>\n<p>As your system grows, 8 minutes may easily become 15 or 30 minutes</p>\n<h3 id=\"how-fast-is-fast\" style=\"position:relative;\"><a href=\"#how-fast-is-fast\" aria-label=\"how fast is fast permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How fast is fast?</h3>\n<p>If it is painful to run your test suite more than a couple times a day, you’ve tipped the scale in the wrong direction</p>\n<p>Your test suite should provide <strong>continuous</strong>, <strong>comprehensive</strong>, and <strong>fast</strong> feedback about the health of your system</p>\n<ul>\n<li>This implies that you should run it often</li>\n<li>If you don't, you will start to question the investment you made to create it</li>\n</ul>\n<h3 id=\"how-to-keep-tests-fast\" style=\"position:relative;\"><a href=\"#how-to-keep-tests-fast\" aria-label=\"how to keep tests fast permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to keep tests fast?</h3>\n<ol>\n<li>Minimize the dependencies on code that executes slowly.</li>\n<li>Avoid making database calls</li>\n<li>Avoid making HTTP requests</li>\n<li>Avoid open, writing, and closing files</li>\n</ol>\n<p>Think of your course project.<strong>What can significantly slow down your tests?</strong></p>\n<h2 id=\"first-isolated\" style=\"position:relative;\"><a href=\"#first-isolated\" aria-label=\"first isolated permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>F[I]RST: Isolated</h2>\n<p>Isolated tests have two main characteristics. They are focused and independent.</p>\n<h3 id=\"isolated-implies-focused\" style=\"position:relative;\"><a href=\"#isolated-implies-focused\" aria-label=\"isolated implies focused permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Isolated implies focused</h3>\n<p>Good unit tests focus on a small chunk of code to verify.</p>\n<p>When you start to add a second assertion to a test, ask yourself:</p>\n<blockquote>\n<p>Does this assertion help to verify a single behavior, or does it represent a behavior that I could describe with a new test name?</p>\n</blockquote>\n<p>If one of your test methods can break for more than one reason, consider splitting it into separate tests.</p>\n<p>When a focused unit test breaks, it’s usually obvious why</p>\n<h3 id=\"isolated-implies-independent\" style=\"position:relative;\"><a href=\"#isolated-implies-independent\" aria-label=\"isolated implies independent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Isolated implies independent</h3>\n<p>Good unit tests depend as little as possible on other unit tests.</p>\n<p>The more code that your test interacts with, directly or indirectly, the more things can break it</p>\n<p>Tests that must ultimately depend on a database require you to ensure that the database has the right data:</p>\n<ul>\n<li>If your data source is shared, you have to worry about external changes breaking your tests</li>\n<li>Don’t forget that other developers are often running their tests at the same time!</li>\n<li>Simply interacting with an external store increases the likelihood that your test will fail for <em>availability</em> or <em>accessibility</em> reasons.</li>\n</ul>\n<p>Good unit tests also don’t depend on other unit tests (or test cases within the same test method)</p>\n<p><strong>You should be able to run any given test at any time, in any order.</strong></p>\n<h2 id=\"first-repeatable\" style=\"position:relative;\"><a href=\"#first-repeatable\" aria-label=\"first repeatable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FI[R]ST: Repeatable</h2>\n<p>A <strong>repeatable test</strong> is one that produces the same results each time you run it.</p>\n<p>Repeatability often requires isolation.</p>\n<p>Avoid the temptation of adding a random value to your tests:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> y <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Without repeatability, you might be in for some surprises:</p>\n<ul>\n<li>You test may fail while it works as it is supposed to</li>\n<li>You do not want to waste time chasing down phantom problems</li>\n</ul>\n<p><strong>Each test should produce the same results every time.</strong></p>\n<h2 id=\"first-self-validating\" style=\"position:relative;\"><a href=\"#first-self-validating\" aria-label=\"first self validating permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FIR[S]T: Self-Validating</h2>\n<p>Tests are not tests unless they <strong>assert that things went as expected</strong></p>\n<p>You write unit tests to save you time, not take more of your time:</p>\n<ul>\n<li>Manually verifying test results is time-consuming and risky</li>\n<li>It is easy to overlook important signs when you test manually</li>\n</ul>\n<h3 id=\"self-validating-implies-self-arranging\" style=\"position:relative;\"><a href=\"#self-validating-implies-self-arranging\" aria-label=\"self validating implies self arranging permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Self-validating implies self-arranging</h3>\n<p>Your tests should never require manual setups before you can run them.</p>\n<p><strong>You must automate any setup your test requires</strong></p>\n<h2 id=\"first-timely\" style=\"position:relative;\"><a href=\"#first-timely\" aria-label=\"first timely permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FIRS[T]: Timely</h2>\n<p>You can write unit tests at any time, but you are better off focusing on <em>writing unit tests in a timely fashion</em>.</p>\n<p>The more you defer writing tests, the more defects you will need to deal with.</p>\n<p>Once you check code into your git, it is unlikely that you will come back and write tests for it.</p>\n<p>Many dev teams have rules around unit testing:</p>\n<ul>\n<li>Review processes</li>\n<li>Automated tools to reject code without sufficient tests</li>\n</ul>\n<p>It pays to write smaller chunks of code:</p>\n<ul>\n<li>It’ll be easier to write the test</li>\n<li>The test will pay off immediately as you flesh out the rest of the behaviors in the surrounding code</li>\n</ul>","frontmatter":{"slug":"/testing/first","title":"FIRST","course":"Programming Project 2021/22","previous":"/testing/repeated","next":"/testing/right-bicep","chapter":13,"section":9,"module":"Testing","banner":null}}},"pageContext":{"slug":"/testing/first"}},
    "staticQueryHashes": ["800307450"]}