{
    "componentChunkName": "component---src-templates-template-js",
    "path": "/testing/hooks",
    "result": {"data":{"markdownRemark":{"html":"<h2 id=\"lifecycle-phases\" style=\"position:relative;\"><a href=\"#lifecycle-phases\" aria-label=\"lifecycle phases permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lifecycle Phases</h2>\n<p>A typical JUnit test class has multiple test cases, each of which is governed by a test lifecycle.</p>\n<p>A cycle consists of the following three phases:</p>\n<ol>\n<li><strong>Setup phase</strong>, when the test infrastructure is put in place:\n<ul>\n<li>One part is done once before all tests within a class are executed</li>\n<li>One part is done before each test method is executed the test level</li>\n</ul>\n</li>\n<li><strong>Execution phase</strong>, when the test methods are executed and their assertions are verified\n<ul>\n<li>The execution result will signify a success or failure.</li>\n</ul>\n</li>\n<li><strong>Cleanup phase</strong>, when any cleanup required after test execution is performed. Just like the class-level setup, there is a class-level cleanup also, which can be used to dispose of all the singletons created at the class level.</li>\n</ol>\n<p><img src=\"/5d752e5c4aee395595817866c837079a/junit_test_lifecycle.gif\" alt=\"\"></p>\n<h2 id=\"beforeall\" style=\"position:relative;\"><a href=\"#beforeall\" aria-label=\"beforeall permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@BeforeAll</code></h2>\n<p>The <code class=\"language-text\">org.junit.jupiter.api.BeforeAll</code> annotation is responsible for performing a single time initialization for all test cases in a class.</p>\n<p>The annotated method must be <strong>static</strong> and <strong>non-private</strong>.</p>\n<p>This hook is often used to create costly objects like database connection, which can be reused for all the test cases.</p>\n<p>The work done in a <code class=\"language-text\">@BeforeAll</code> can be moved to <code class=\"language-text\">@BeforeEach</code>, but since it is usually a computationally expensive operation, the overall test execution can take much longer.</p>\n<p>The annotation also has an inherited behavior. If there are superclass methods marked with @BeforeAll they will be executed before any such methods of the test class.</p>\n<p>Here is an example on how to use <code class=\"language-text\">@BeforeAll</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CalculatorBeforeAll</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> inputValue<span class=\"token punctuation\">;</span>\n\n   <span class=\"token annotation punctuation\">@BeforeAll</span>\n   <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I have been executed once before all methods\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      inputValue <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token annotation punctuation\">@Test</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">positiveMultiplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value available in positiveMultiplication(): \"</span> <span class=\"token operator\">+</span> inputValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">.</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>inputValue<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token annotation punctuation\">@Test</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">negativeMultiplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value available in negativeMultiplication(): \"</span> <span class=\"token operator\">+</span> inputValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">.</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>inputValue<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"beforeeach\" style=\"position:relative;\"><a href=\"#beforeeach\" aria-label=\"beforeeach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@BeforeEach</code></h2>\n<p>The <code class=\"language-text\">org.junit.jupiter.api.BeforeEach</code> annotation is responsible for performing any initialization before executing a single test.</p>\n<p>The objects will be created for each test, thus <strong>avoiding any side effects from other test executions</strong>.</p>\n<p>A test case can have any number of methods marked with <code class=\"language-text\">@BeforeEach</code> but the execution order is not guaranteed.\nThe JUnit engine can run them in any order.</p>\n<p>These methods are executed before each and every test; so always make sure they <strong>contain initialization code that makes sense for all test cases</strong>.</p>\n<p>Here is an example on how to use <code class=\"language-text\">@BeforeEach</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CalculatorBeforeEach</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> inputValue<span class=\"token punctuation\">;</span>\n\n   <span class=\"token annotation punctuation\">@BeforeEach</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I execute before each test method\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      inputValue <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token annotation punctuation\">@Test</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">positiveMultiplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value available in positiveMultiplication(): \"</span> <span class=\"token operator\">+</span> inputValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">.</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>inputValue<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      inputValue <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token annotation punctuation\">@Test</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">negativeMultiplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value available in negativeMultiplication(): \"</span> <span class=\"token operator\">+</span> inputValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">.</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>inputValue<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      inputValue <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"avoid-dependent-tests\" style=\"position:relative;\"><a href=\"#avoid-dependent-tests\" aria-label=\"avoid dependent tests permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Avoid dependent tests</h2>\n<p>It is a good idea to <strong>keep tests independent</strong>.</p>\n<ul>\n<li>Dependent tests make a test suite harder to read and understand.</li>\n<li>In the event of a failure, dependent tests are harder to debug.</li>\n</ul>\n<p>Imagine the following case:</p>\n<ul>\n<li><code class=\"language-text\">testA</code> depends on <code class=\"language-text\">testB</code>, which depends on <code class=\"language-text\">testC</code></li>\n<li>if <code class=\"language-text\">testA</code> fails we need to expend effort to determine if all of the previous test cases executed fine and properly initialized the test setup.</li>\n</ul>\n<p>This is an unwanted <strong>Test Smell</strong>.</p>\n<h2 id=\"aftereach\" style=\"position:relative;\"><a href=\"#aftereach\" aria-label=\"aftereach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@AfterEach</code></h2>\n<p>The <code class=\"language-text\">org.junit.jupiter.api.AfterEach</code> annotation is the counterpart of the <code class=\"language-text\">org.junit.jupiter.api.BeforeEach</code> annotation.</p>\n<p>It is used to implement the “what goes up must come down” principle.</p>\n<p>A method marked with <code class=\"language-text\">@AfterEach</code> is responsible for post-test execution cleanup.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CalculatorLifeCycle</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token annotation punctuation\">@AfterEach</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I execute after each test method\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token annotation punctuation\">@Test</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">positiveMultiplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I execute test positiveMultiplication()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">.</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token annotation punctuation\">@Test</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">negativeMultiplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I execute test negativeMultiplication()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">.</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"afterall\" style=\"position:relative;\"><a href=\"#afterall\" aria-label=\"afterall permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@AfterAll</code></h2>\n<p>The <code class=\"language-text\">org.junit.jupiter.api.AfterAll</code> annotation is the counterpart of the <code class=\"language-text\">org.junit.jupiter.api.BeforeAll</code> annotation.</p>\n<p><code class=\"language-text\">@AfterAll</code> performs a single time method invocation (i.e., post the execution of all test cases of a test class).</p>\n<p>The method must be <strong>static</strong> and <strong>non-private</strong>.</p>\n<p>The annotation also has an inherited behavior. If there are superclass methods marked with @AfterAll they will be executed after any such methods of the test class.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CalculatorLifeCycle</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token annotation punctuation\">@AfterAll</span>\n   <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I execute once after all test methods\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token annotation punctuation\">@Test</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">positiveMultiplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I execute test positiveMultiplication()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">.</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token annotation punctuation\">@Test</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">negativeMultiplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I execute test negativeMultiplication()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">.</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"complete-example\" style=\"position:relative;\"><a href=\"#complete-example\" aria-label=\"complete example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Complete example</h2>\n<p>Here is an example using all lifecycle hooks:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CalculatorLifeCycle</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token annotation punctuation\">@BeforeAll</span>\n   <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I execute once before all test methods\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token annotation punctuation\">@BeforeEach</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I execute before each test method\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token annotation punctuation\">@AfterEach</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I execute after each test method\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token annotation punctuation\">@AfterAll</span>\n   <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I execute once after all test methods\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token annotation punctuation\">@Test</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">positiveMultiplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I execute test positiveMultiplication()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">.</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token annotation punctuation\">@Test</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">negativeMultiplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I execute test negativeMultiplication()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">.</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"exercise\" style=\"position:relative;\"><a href=\"#exercise\" aria-label=\"exercise permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exercise</h2>\n<p>You were tasked to write tests for the <code class=\"language-text\">ArrayList</code> class.</p>\n<ol>\n<li>Create a test class called <code class=\"language-text\">ArrayListTest</code> and use a <code class=\"language-text\">@BeforeEach</code> annotation to create an empty list to test the behavior of the methods <code class=\"language-text\">add()</code> and <code class=\"language-text\">remove()</code>.</li>\n<li>Create a test class called <code class=\"language-text\">ArrayListTestAdd</code> and use a <code class=\"language-text\">@BeforeAll</code> annotation to set up a list which you will then use verify the expected behavior of <code class=\"language-text\">size()</code> and <code class=\"language-text\">get()</code>.</li>\n</ol>","frontmatter":{"slug":"/testing/hooks","title":"JUnit Lifecycle API","course":"Programming Project 2021/22","previous":"/testing/junit-5-basics","next":"/testing/exceptions","chapter":13,"section":4,"module":"Testing","banner":"https://upload.wikimedia.org/wikipedia/commons/5/59/JUnit_5_Banner.png"}}},"pageContext":{"slug":"/testing/hooks"}},
    "staticQueryHashes": ["800307450"]}