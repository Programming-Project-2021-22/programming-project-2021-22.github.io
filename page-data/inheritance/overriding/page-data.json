{
    "componentChunkName": "component---src-templates-template-js",
    "path": "/inheritance/overriding",
    "result": {"data":{"markdownRemark":{"html":"<h2 id=\"method-overriding\" style=\"position:relative;\"><a href=\"#method-overriding\" aria-label=\"method overriding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Method overriding</h2>\n<p>A subclass can <strong>override</strong> (replace) an inherited method so that the subclass's version of the method is called instead.</p>\n<p>An overriding method must specify <strong>the same name, parameter list, and return type</strong> as the method being overridden.</p>\n<p>Here is an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Vehicle</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> make<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> model<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> year<span class=\"token punctuation\">;</span>\n\n   <span class=\"token class-name\">Vehicle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> make<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> model<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> year<span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>make <span class=\"token operator\">=</span> make<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> model<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> year<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token comment\">// getters and setters</span>\n\n   <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Make: \"</span> <span class=\"token operator\">+</span> make <span class=\"token operator\">+</span> <span class=\"token string\">\", Model: \"</span> <span class=\"token operator\">+</span> model <span class=\"token operator\">+</span> <span class=\"token string\">\", Year: \"</span> <span class=\"token operator\">+</span> year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Truck</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vehicle</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> tonnage<span class=\"token punctuation\">;</span>\n\n   <span class=\"token class-name\">Truck</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> make<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> model<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> year<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> tonnage<span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>make<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tonnage <span class=\"token operator\">=</span> tonnage<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">double</span> <span class=\"token function\">getTonnage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> tonnage<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tonnage: \"</span> <span class=\"token operator\">+</span> tonnage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Truck</code>'s <code class=\"language-text\">print()</code> method has the same name, return type, and parameter list as <code class=\"language-text\">Vehicle</code>'s <code class=\"language-text\">print()</code> method.</p>\n<p>Note that <code class=\"language-text\">Truck</code>'s <code class=\"language-text\">print()</code> method first calls <code class=\"language-text\">Vehicle</code>'s <code class=\"language-text\">print()</code> method by prefixing <code class=\"language-text\">super</code> to the method name. It often makes sense to execute the superclass logic first and then execute the subclass logic.</p>\n<p>In order to call a superclass method from the overriding subclass method, prefix the method's name with the reserved word <code class=\"language-text\">super</code> and the member access operator. Otherwise you will end up recursively calling the subclass's overriding method.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tonnage: \"</span> <span class=\"token operator\">+</span> tonnage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In some cases a subclass will mask non-private superclass fields by declaring same-named fields. You can use super and the member access operator to access the non-private superclass fields.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Vehicle</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span> make<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Truck</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vehicle</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span> make<span class=\"token punctuation\">;</span> \n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span>make<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>make<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"override\" style=\"position:relative;\"><a href=\"#override\" aria-label=\"override permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@Override</code></h2>\n<p>It is a good practice to annotate the overriding methods with the annotation <code class=\"language-text\">@Override</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tonnage: \"</span> <span class=\"token operator\">+</span> tonnage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Advantages:</strong></p>\n<ul>\n<li>Compile-time checking to make sure you actually are overriding the correct method. If you make the common mistake of misspelling a method name or incorrectly matching its parameters, you will be warned!</li>\n<li>It makes your code easier to understand because it is more obvious when methods are overwritten.</li>\n</ul>\n<h2 id=\"this-vs-super\" style=\"position:relative;\"><a href=\"#this-vs-super\" aria-label=\"this vs super permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">this</code> vs <code class=\"language-text\">super</code></h2>\n<ul>\n<li><code class=\"language-text\">this</code> refers to this class</li>\n<li><code class=\"language-text\">super</code> refers to the parent class</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">whoAreYou</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am an animal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Fish</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">whoAreYou</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am a Fish\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">whoAreYouReally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">whoAreYou</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">whoAreYou</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThisSuper</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Animal</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    a<span class=\"token punctuation\">.</span><span class=\"token function\">whoAreYou</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Fish</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Fish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    f<span class=\"token punctuation\">.</span><span class=\"token function\">whoAreYou</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    f<span class=\"token punctuation\">.</span><span class=\"token function\">whoAreYouReally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\">I am an animal\n---\nI am a Fish\n---\nI am an animal\nI am a Fish</code></pre></div>\n<h2 id=\"use-final-to-block-method-overriding\" style=\"position:relative;\"><a href=\"#use-final-to-block-method-overriding\" aria-label=\"use final to block method overriding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use final to block method overriding</h2>\n<p>Occasionally you might need to declare a <strong>method that should not be overridden</strong> (for security reasons, for instance).</p>\n<p>You can use the <code class=\"language-text\">final</code> keyword for this purpose, as in</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The compiler will then report an error if anyone attempts to override this method in a subclass.</p>\n<h2 id=\"exercise-4\" style=\"position:relative;\"><a href=\"#exercise-4\" aria-label=\"exercise 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exercise 4</h2>\n<p>Modify the class <code class=\"language-text\">Car</code> from the previous exercise such that it overrides <code class=\"language-text\">setLicensePlate(String)</code> defined in <code class=\"language-text\">Vehicle</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vehicle</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> numberOfSeats <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Vehicle</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> licensePlate<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getLicensePlate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> licensePlate<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> setLicensePlate <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> licensePlate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>licensePlate <span class=\"token operator\">=</span> licensePlate<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"exercise-5\" style=\"position:relative;\"><a href=\"#exercise-5\" aria-label=\"exercise 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exercise 5</h2>\n<p>Using the <code class=\"language-text\">Bicycle</code> class below:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bicycle</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> speed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> gear <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">changeGear</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> newValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    gear <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">speedUp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> increment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    speed <span class=\"token operator\">=</span> speed <span class=\"token operator\">+</span> increment<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">applyBrakes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> decrement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    speed <span class=\"token operator\">=</span> speed <span class=\"token operator\">-</span> decrement<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"speed:\"</span> <span class=\"token operator\">+</span> speed <span class=\"token operator\">+</span> <span class=\"token string\">\", gear:\"</span> <span class=\"token operator\">+</span> gear<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Write a <code class=\"language-text\">MountainBike</code> class that specialize it, such that:</p>\n<ul>\n<li>It has a new field, <code class=\"language-text\">int seatHeight</code></li>\n<li>Its minimum <code class=\"language-text\">gear</code> value is 1 and its maximum <code class=\"language-text\">gear</code> value is 4.</li>\n<li>Its <code class=\"language-text\">toString()</code> method reuses <code class=\"language-text\">Bicycle::toString()</code> but adds the <code class=\"language-text\">seatHeight</code> value.</li>\n</ul>\n<p>Now write a <code class=\"language-text\">Runner</code> class that creates objects and call methods of both classes.</p>\n<h2 id=\"exercise-6\" style=\"position:relative;\"><a href=\"#exercise-6\" aria-label=\"exercise 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exercise 6</h2>\n<p>Write <code class=\"language-text\">InverseString</code>, a class that implements the <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/CharSequence.html\"><code class=\"language-text\">java.lang.CharSequence</code></a> interface.</p>\n<p>You will have to implement:</p>\n<ul>\n<li><code class=\"language-text\">char charAt(int index)</code>: Returns the char value at the specified index.</li>\n<li><code class=\"language-text\">int length()</code>: Returns the length of this character sequence.</li>\n<li><code class=\"language-text\">CharSequence subSequence(int start, int end)</code>: Returns a CharSequence that is a subsequence of this sequence.</li>\n<li><code class=\"language-text\">String toString()</code>: Returns a string containing the characters in this sequence in the same order as this sequence.</li>\n</ul>\n<p>The special characteristic of <code class=\"language-text\">InverseString</code> is that it inverts the <code class=\"language-text\">CharSequence</code> given as input in its constructor.</p>\n<p>Then, write a small <code class=\"language-text\">main()</code> method to test your class; make sure to call all four methods.</p>","frontmatter":{"slug":"/inheritance/overriding","title":"Method Overriding","course":"Programming Project 2021/22","previous":"/inheritance/interfaces","next":"/inheritance/multiple-inheritance","chapter":6,"section":3,"module":"Inheritance","banner":null}}},"pageContext":{"slug":"/inheritance/overriding"}},
    "staticQueryHashes": ["800307450"]}