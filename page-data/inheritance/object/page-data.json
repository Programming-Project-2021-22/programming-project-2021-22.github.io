{
    "componentChunkName": "component---src-templates-template-js",
    "path": "/inheritance/object",
    "result": {"data":{"markdownRemark":{"html":"<h2 id=\"object-and-its-methods\" style=\"position:relative;\"><a href=\"#object-and-its-methods\" aria-label=\"object and its methods permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">Object</code> and its methods</h2>\n<p><code class=\"language-text\">Object</code> is the root class of all other Java classes (including arrays).</p>\n<p><code class=\"language-text\">Object</code> is located in the <code class=\"language-text\">java.lang</code> package.</p>\n<p><code class=\"language-text\">Object</code> declares the following methods, which all other classes inherit:</p>\n<ul>\n<li><code class=\"language-text\">protected Object clone()</code></li>\n<li><code class=\"language-text\">boolean equals(Object obj)</code></li>\n<li><code class=\"language-text\">protected void finalize()</code></li>\n<li><code class=\"language-text\">Class&lt;?> getClass()</code></li>\n<li><code class=\"language-text\">int hashCode()</code></li>\n<li><code class=\"language-text\">String toString()</code></li>\n<li><code class=\"language-text\">void notify()</code></li>\n<li><code class=\"language-text\">void notifyAll()</code></li>\n<li><code class=\"language-text\">void wait()</code></li>\n<li><code class=\"language-text\">void wait(long timeout)</code></li>\n<li><code class=\"language-text\">void wait(long timeout, int nanos)</code></li>\n</ul>\n<p>These methods allow you to perform special tasks in your Java classes.</p>\n<h2 id=\"extending-object\" style=\"position:relative;\"><a href=\"#extending-object\" aria-label=\"extending object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Extending <code class=\"language-text\">Object</code></h2>\n<p>You can extend <code class=\"language-text\">Object</code> <em>explicitly</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Object</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Employee</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tiago\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Or <em>implicitly</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Less is more in this case, so pick the implicit alternative.</p>\n<h2 id=\"getclass\" style=\"position:relative;\"><a href=\"#getclass\" aria-label=\"getclass permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">getClass()</code></h2>\n<p>The <code class=\"language-text\">getClass()</code> method returns the runtime class of the object on which this method is called.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Someclass</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Someclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Class</span> c <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The runtime class is represented by a <code class=\"language-text\">Class</code> object (from the <code class=\"language-text\">java.lang</code> package).</p>\n<p>A <code class=\"language-text\">Class</code> object is sort of a meta object describing the class of an object.</p>\n<p>It contains the following data about the class:</p>\n<ul>\n<li>name</li>\n<li>package</li>\n<li>methods</li>\n<li>fields</li>\n<li>constructors</li>\n<li>annotations</li>\n</ul>\n<h2 id=\"exercise-8\" style=\"position:relative;\"><a href=\"#exercise-8\" aria-label=\"exercise 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exercise 8</h2>\n<p>Create the class <code class=\"language-text\">Something</code>:</p>\n<ul>\n<li><code class=\"language-text\">int a</code> + getter/setter</li>\n</ul>\n<p>Create a class <code class=\"language-text\">Runner</code> with a main method that:</p>\n<ul>\n<li>create an instance of <code class=\"language-text\">Something</code></li>\n<li>create the runtime object using <code class=\"language-text\">getClass()</code></li>\n<li>print the name of the instance</li>\n<li>print the name of the superclass</li>\n<li>print the first field member using <code class=\"language-text\">getDeclaredFields()</code></li>\n</ul>\n<!-- ## Solution\n\n```java\npublic class Something {\n   private int a = 0;\n   public int b = 0;\n\n   public int getA() {\n     return a;\n   }\n\n   public void setA(int a) {\n     this.a = a;\n   }\n}\n```\n\n```java\nimport java.lang.reflect.Field;\n\npublic class Runner {\n   public static void main(String[] args) {\n      Something s = new Something();\n\n      Class c = s.getClass();\n\n      System.out.println(c.getName());\n      System.out.println(c.getSuperclass());\n\n      Field[] fields = c.getDeclaredFields();\n      for (Field field : fields)\n         System.out.println(field);\n   }\n}\n``` -->\n<h2 id=\"object-duplication\" style=\"position:relative;\"><a href=\"#object-duplication\" aria-label=\"object duplication permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object duplication</h2>\n<p><strong>How do we achieve a true distinct copy of an object?</strong></p>\n<p><img src=\"/db5f6a6f26215ca5b526907cbed199af/PrimitiveReference_2.gif\" alt=\"primitive-ref\"></p>\n<h2 id=\"clone\" style=\"position:relative;\"><a href=\"#clone\" aria-label=\"clone permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">clone()</code></h2>\n<p>The <code class=\"language-text\">clone()</code> method creates and returns a copy of the object on which it is called.</p>\n<p>It always returns an <code class=\"language-text\">Object</code>, hence it  <strong>must be cast</strong> to the object's actual type</p>\n<p>To create a clone, write:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">aCloneableObject<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">Object</code>'s implementation of this method <strong>checks to see whether the object on which <code class=\"language-text\">clone()</code> was invoked implements the <code class=\"language-text\">Cloneable</code> interface</strong>. If it does not, the method throws a <code class=\"language-text\">CloneNotSupportedException</code> exception.</p>\n<p>The default implementation of <code class=\"language-text\">clone()</code>:</p>\n<ul>\n<li>Creates an object of the same class as the original object</li>\n<li>Initializes the new object's member variables to have the same values as those of the original object</li>\n</ul>\n<p>The simplest way to make your class cloneable is to:</p>\n<ul>\n<li>Implement the <code class=\"language-text\">Cloneable</code> interface</li>\n<li>Implement <code class=\"language-text\">clone()</code> by invoking <code class=\"language-text\">super.clone()</code>:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">protected</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CloneNotSupportedException</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can also write you own implementation of <code class=\"language-text\">clone()</code></p>\n<h2 id=\"exercise-9\" style=\"position:relative;\"><a href=\"#exercise-9\" aria-label=\"exercise 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exercise 9</h2>\n<ol>\n<li>Reuse the class <code class=\"language-text\">Something</code> from the last exercise\n<ul>\n<li>add implements Cloneable</li>\n<li>override <code class=\"language-text\">public Object clone()</code></li>\n</ul>\n</li>\n<li>Make a <code class=\"language-text\">Runner</code> class that\n<ul>\n<li>make an instance s1 of <code class=\"language-text\">Something</code>\n<ul>\n<li>set a=10</li>\n<li>print the value of s1.a</li>\n</ul>\n</li>\n<li>make an instance s2 of <code class=\"language-text\">Something</code>\n<ul>\n<li>set a=20</li>\n<li>print the value of s1.a, s2.a</li>\n</ul>\n</li>\n<li>make a variable s3 and assign it to s1\n<ul>\n<li>set a = 30</li>\n<li>print the value of s1.a, s2.a, s3.a</li>\n</ul>\n</li>\n<li>make a variable s4 and assign it to a clone of s2\n<ul>\n<li>set a = 40</li>\n<li>print the value of s1.a, s2.a, s3.a, s4.a</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<!-- ## Solution\n\n```java\npublic class Something implements Cloneable {\n    public int a = 0;\n\n\t\tpublic Something(int a) {\n        this.a = a;\n    }\n\n    public int getA() {\n        return a;\n    }\n\n    public void setA(int a) {\n        this.a = a;\n    }\n\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n}\n```\n\n```java\npublic class Runner {\n   public static void main(String[] args) {\n      Something s1 = new Something(10);\n      Something s3 = s1;\n      System.out.println(\"s1=\" + s1.a);\n      System.out.println(\"s3=\" + s3.a);\n      s3.a = 30;\n      System.out.println(\"s1=\" + s1.a);\n      System.out.println(\"s3=\" + s3.a);\n      System.out.println(); \n      try {\n         Something s2 = new Something(20);\n         Something s4 = (Something) s2.clone();\n         System.out.println(\"s2=\" + s2.a);\n         System.out.println(\"s4=\" + s4.a);  \n         s4.a = 40;\n         System.out.println(\"s2=\" + s2.a);\n         System.out.println(\"s4=\" + s4.a);\n      } catch (CloneNotSupportedException e) {\n         e.printStackTrace();\n      }\n  }\n}\n\n```\n\n```output\ns1=10\ns3=10\ns1=30\ns3=30\n\ns2=20\ns4=20\ns2=20\ns4=40\n``` -->\n<h2 id=\"comparing-objects\" style=\"position:relative;\"><a href=\"#comparing-objects\" aria-label=\"comparing objects permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comparing objects</h2>\n<p>We can compare reference variables using:</p>\n<ul>\n<li><strong>Referential equality</strong>: compares two variables to determine if they refer to the same object</li>\n<li><strong>Content equality</strong>: compares two objects to determine if they have the same contents (i.e. instance variables)</li>\n</ul>\n<p>When you use <code class=\"language-text\">==</code> on <strong>primitive variables</strong>, it performs a <strong>content equality</strong> check:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x==y: \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => x==y: true</span></code></pre></div>\n<p>When you use <code class=\"language-text\">==</code> on <strong>reference variables</strong>, it performs a <strong>referential equality</strong> check:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Person</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tiago\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Person</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tiago\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a==b: \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => a==b: false</span></code></pre></div>\n<p><strong>What if we want to compare objects by their content?</strong></p>\n<h2 id=\"equals\" style=\"position:relative;\"><a href=\"#equals\" aria-label=\"equals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">equals()</code></h2>\n<p>The <code class=\"language-text\">equals()</code> method lets you compare the contents of two objects to see if they are equal.</p>\n<p><code class=\"language-text\">Object</code>'s default implementation of <code class=\"language-text\">equals()</code> performs a referential equality check.</p>\n<p>To perform content equality, we need to override <code class=\"language-text\">equals()</code>.</p>\n<p>The rules for overriding this method are stated in Oracle's official documentation for the <code class=\"language-text\">Object</code> class:</p>\n<ul>\n<li>Be <strong>reflexive</strong>: For any non-null reference value x, <code class=\"language-text\">x.equals(x)</code> should return true.</li>\n<li>Be <strong>symmetric</strong>: For any non-null reference values x and y, <code class=\"language-text\">x.equals(y)</code> should return true if and only if <code class=\"language-text\">y.equals(x)</code> returns true.</li>\n<li>Be <strong>transitive</strong>: For any non-null reference values x, y, and z, if <code class=\"language-text\">x.equals(y)</code> returns true and <code class=\"language-text\">y.equals(z)</code> returns true, then <code class=\"language-text\">x.equals(z)</code> should return true.</li>\n<li>Be <strong>consistent</strong>: For any non-null reference values x and y, multiple invocations of <code class=\"language-text\">x.equals(y)</code> consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified.</li>\n<li>For any non-null reference value x, <code class=\"language-text\">x.equals(null)</code> should return false.</li>\n</ul>\n<p>When overriding <code class=\"language-text\">equals()</code>, it's common practice to also override the <code class=\"language-text\">hashCode()</code> method.</p>\n<h2 id=\"content-equality-example\" style=\"position:relative;\"><a href=\"#content-equality-example\" aria-label=\"content equality example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Content equality: Example</h2>\n<p>Here is how you can compare the contents of two objects:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> obj<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Employee</span> e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The Java <code class=\"language-text\">instanceof</code> operator is used to test whether the object is an instance of the specified type (class or subclass or interface).</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Equals</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Employee</span> e1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tiago\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Employee</span> e2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tiago\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Is e1 equals to e1: \"</span> <span class=\"token operator\">+</span> e1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Is e1 equals to e2: \"</span> <span class=\"token operator\">+</span> e1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>e2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Is e2 equals to e1: \"</span> <span class=\"token operator\">+</span> e2<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Employee</span> e3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tiago\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Is e1 equals to e3: \"</span> <span class=\"token operator\">+</span> e1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>e3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Is e3 equals to e1: \"</span> <span class=\"token operator\">+</span> e3<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Employee</span> e4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Camila\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Is e1 equals to e4: \"</span> <span class=\"token operator\">+</span> e1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>e4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Is e4 equals to e1: \"</span> <span class=\"token operator\">+</span> e4<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"output\"><pre class=\"language-output\"><code class=\"language-output\">Is e1 equals to e1: true\nIs e1 equals to e2: true\nIs e2 equals to e1: true\nIs e1 equals to e3: false\nIs e3 equals to e1: false\nIs e1 equals to e4: false\nIs e4 equals to e1: false</code></pre></div>\n<h2 id=\"exercise-10\" style=\"position:relative;\"><a href=\"#exercise-10\" aria-label=\"exercise 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exercise 10</h2>\n<p>Write a class <code class=\"language-text\">Land</code>, containing:</p>\n<ul>\n<li>int width</li>\n<li>int length</li>\n<li>getArea()</li>\n</ul>\n<p>Override the <code class=\"language-text\">equals()</code> method in such a way that <strong>returns true if the area (width*length) is equal in both objects</strong>, e.g. <code class=\"language-text\">Land(10,10) = Land(20,5)</code></p>\n<!-- ## Solution\n\n```java\npublic class Land {\n  int width = 0;\n  int length = 0;\n\n  public int getArea() {\n    int area = width * length;\n    return area;\n  }\n\n  @Override\n  public boolean equals(Object obj) {\n    if (!(obj instanceof Land)) {\n      return false;\n    }\n\n    Land land = (Land) obj;\n    return land.getArea() == this.getArea();\n  }\n\n  public Land(int w, int l) {\n    super();\n    this.width = w;\n    this.length = l;\n  }\n}\n```\n\n```java\npublic class Runner {\n   public static void main(String[] argl) {\n      Land l1 = new Land(100, 200);\n      System.out.println(\"w: \" + l1.width + \", l: \" + l1.length + \", a: \" + l1.getArea());\n\n      Land l2 = new Land(500, 4);\n      System.out.println(\"w: \" + l2.width + \", l: \" + l2.length + \", a: \" + l2.getArea());\n\n      System.out.println(\"Is l1 equals to l2: \" + l1.equals(l2));\n\n      Land l3 = new Land(500, 600);\n      System.out.println(\"w: \" + l3.width + \", l: \" + l3.length + \", a: \" + l3.getArea());\n\n      System.out.println(\"Is l1 equals to l3: \" + l1.equals(l3));\n      System.out.println(\"Is l2 equals to l3: \" + l2.equals(l3));\n   }\n}\n``` -->\n<h2 id=\"tostring\" style=\"position:relative;\"><a href=\"#tostring\" aria-label=\"tostring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">toString()</code></h2>\n<p>The <code class=\"language-text\">toString()</code> method returns a string representation of the object on which the method is called.</p>\n<p>It is quite useful for debugging purposes.</p>\n<p>By default, <code class=\"language-text\">toString()</code> return a value in the format <code class=\"language-text\">classname@hashcode</code>, where hashcode is shown in hexadecimal notation.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Employee</span> me <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tiago\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>me<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"output\"><pre class=\"language-output\"><code class=\"language-output\">Employee@424058530</code></pre></div>\n<p>To get more meaningful messages, we can override this method:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Employee{\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\", age=\"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span>\n            <span class=\"token char\">'}'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"output\"><pre class=\"language-output\"><code class=\"language-output\">Employee{name=&#39;Tiago&#39;, age=30}</code></pre></div>","frontmatter":{"slug":"/inheritance/object","title":"The Object Class","course":"Programming Project 2021/22","previous":"/inheritance/polymorphism","next":"/inheritance/casting","chapter":6,"section":8,"module":"Inheritance","banner":null}}},"pageContext":{"slug":"/inheritance/object"}},
    "staticQueryHashes": ["800307450"]}