{
    "componentChunkName": "component---src-templates-template-js",
    "path": "/inheritance/abstract",
    "result": {"data":{"markdownRemark":{"html":"<h2 id=\"what-is-an-abstract-class\" style=\"position:relative;\"><a href=\"#what-is-an-abstract-class\" aria-label=\"what is an abstract class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is an abstract class?</h2>\n<p>A class that cannot be directly instantiated</p>\n<p>An abstract class:</p>\n<ul>\n<li>is declared using the keyword <code class=\"language-text\">abstract</code></li>\n<li>may be extended by concrete or abstract classes</li>\n<li>may have abstract and concrete methods</li>\n<li>may have a constructor</li>\n<li>may have have any kind of attributes (e.g. non-static, <code class=\"language-text\">static</code>, <code class=\"language-text\">final</code>, <code class=\"language-text\">private</code>, <code class=\"language-text\">public</code>)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GraphicObject</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">GraphicObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Printing a Graphic Object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If a class includes abstract methods, then it must be declared abstract.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// THIS IS NOT ALLOWED, BECAUSE draw() IS NOT IMPLEMENTED</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">GraphicObject</span> <span class=\"token punctuation\">{</span>\n  \n  <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// Remainder of class body...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A subclass of an abstract class usually provides implementations for all of its abstract methods. If it does not, the subclass itself must also be declared abstract.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GraphicObject</span> <span class=\"token punctuation\">{</span>\n  \n  <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// Remainder of class body...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Abstract classes prevent a programmer from instantiating the base class, because a developer <strong>has marked it as having missing functionality</strong>. It also provides compile-time safety so that you can ensure that any classes that extend your abstract class provides the bare minimum functionality to work.</p>\n<h2 id=\"abstract-classes-vs-interfaces\" style=\"position:relative;\"><a href=\"#abstract-classes-vs-interfaces\" aria-label=\"abstract classes vs interfaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Abstract Classes vs. Interfaces</h2>\n<p><strong>Abstract class:</strong></p>\n<ul>\n<li><strong>abstract</strong> keyword</li>\n<li>Attributes:\n<ul>\n<li>final, regular, static</li>\n<li>private, protected, public</li>\n</ul>\n</li>\n<li>Methods:\n<ul>\n<li>abstract, static, regular</li>\n<li>private, protected, public</li>\n</ul>\n</li>\n<li>Constructors: allowed</li>\n<li>Multiple inheritance: forbidden</li>\n</ul>\n<p><strong>Interface:</strong></p>\n<ul>\n<li><strong>interface</strong> keyword</li>\n<li>Attributes:\n<ul>\n<li>final and static</li>\n<li>public</li>\n</ul>\n</li>\n<li>Methods:\n<ul>\n<li>abstract, static, default</li>\n<li>public</li>\n</ul>\n</li>\n<li>Constructors: forbidden</li>\n<li>Multiple inheritance: allowed</li>\n</ul>","frontmatter":{"slug":"/inheritance/abstract","title":"Abstract Classes","course":"Programming Project 2021/22","previous":"/inheritance/multiple-inheritance","next":"/inheritance/overloading","chapter":6,"section":5,"module":"Inheritance","banner":null}}},"pageContext":{"slug":"/inheritance/abstract"}},
    "staticQueryHashes": ["800307450"]}