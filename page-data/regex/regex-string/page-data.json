{
    "componentChunkName": "component---src-templates-template-js",
    "path": "/regex/regex-string",
    "result": {"data":{"markdownRemark":{"html":"<h2 id=\"backslashes-with-regexp--java\" style=\"position:relative;\"><a href=\"#backslashes-with-regexp--java\" aria-label=\"backslashes with regexp  java permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Backslashes with RegExp &#x26; Java</h2>\n<p>The backslash <code class=\"language-text\">\\</code> is an escape character in Java Strings.</p>\n<p>You have to use double backslash <code class=\"language-text\">\\\\</code> in a String to define a single backslash.</p>\n<p>If you want to define <code class=\"language-text\">\\w</code>, then you must be using <code class=\"language-text\">\"\\\\w\"</code> in your regex.</p>\n<p>If you want to use backslash as a literal, you have to type <code class=\"language-text\">\\\\\\\\</code> as <code class=\"language-text\">\\</code> is also an escape character in regular expressions.</p>\n<h2 id=\"using-regular-expressions-with-string-methods\" style=\"position:relative;\"><a href=\"#using-regular-expressions-with-string-methods\" aria-label=\"using regular expressions with string methods permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using regular expressions with String methods</h2>\n<p>Strings have four built-in methods for regular expressions:</p>\n<ul>\n<li><code class=\"language-text\">matches()</code></li>\n<li><code class=\"language-text\">split()</code></li>\n<li><code class=\"language-text\">replaceFirst()</code></li>\n<li><code class=\"language-text\">replaceAll()</code></li>\n</ul>\n<p>The <code class=\"language-text\">replace()</code> method we have seen before <strong>does NOT support regular expressions</strong></p>\n<p>Remember that these methods are not optimized for performance (more on this in the next class)</p>\n<h2 id=\"using-regular-expressions-with-string-methods-1\" style=\"position:relative;\"><a href=\"#using-regular-expressions-with-string-methods-1\" aria-label=\"using regular expressions with string methods 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using regular expressions with String methods</h2>\n<p><code class=\"language-text\">s.matches(regex)</code>:</p>\n<ul>\n<li>Evaluates if <code class=\"language-text\">regex</code> matches <code class=\"language-text\">s</code>.</li>\n<li>Returns only true if the WHOLE string can be matched</li>\n</ul>\n<p><code class=\"language-text\">s.split(regex)</code>:</p>\n<ul>\n<li>Creates an array with substrings of <code class=\"language-text\">s</code> divided at occurrences of <code class=\"language-text\">regex</code></li>\n</ul>\n<p><code class=\"language-text\">s.replaceFirst(regex, replacement)</code>:</p>\n<ul>\n<li>Replaces the first occurrence of <code class=\"language-text\">regex</code> with <code class=\"language-text\">replacement</code></li>\n</ul>\n<p><code class=\"language-text\">s.replaceAll(regex replacement)</code>:</p>\n<ul>\n<li>Replaces all occurrences of <code class=\"language-text\">regex</code> with <code class=\"language-text\">replacement</code></li>\n</ul>\n<h2 id=\"matching-string-segments\" style=\"position:relative;\"><a href=\"#matching-string-segments\" aria-label=\"matching string segments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Matching string segments</h2>\n<p>The <code class=\"language-text\">matches()</code> method checks if the entire string matches the regex:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RegexMatch</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token class-name\">String</span> phrase <span class=\"token operator\">=</span> <span class=\"token string\">\"What, so everyoneâ€™s supposed to sleep every single night now? \"</span> <span class=\"token operator\">+</span>\n             <span class=\"token string\">\"You realize that nighttime makes up half of all time?\"</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token comment\">// Does the phrase contain the same two letters in a row?</span>\n     <span class=\"token keyword\">boolean</span> matched <span class=\"token operator\">=</span> phrase<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".*(\\\\w)\\\\1.*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Matched /.*(\\\\w)\\\\1.*/: \"</span> <span class=\"token operator\">+</span> matched<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token comment\">// Does the phrase equal \"night\"?</span>\n     matched <span class=\"token operator\">=</span> phrase<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"night\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Matched /night/: \"</span> <span class=\"token operator\">+</span> matched<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token comment\">// Does the phrase contain the word \"night\"?</span>\n     matched <span class=\"token operator\">=</span> phrase<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".*night.*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Matched /.*night.*/: \"</span> <span class=\"token operator\">+</span> matched<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"output\"><pre class=\"language-output\"><code class=\"language-output\">Matched /.*(.)\\1.*/: true\nMatched /night/: false\nMatched /.*night.*/: true</code></pre></div>\n<h2 id=\"splitting-strings-using-regular-expressions\" style=\"position:relative;\"><a href=\"#splitting-strings-using-regular-expressions\" aria-label=\"splitting strings using regular expressions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Splitting strings using regular expressions</h2>\n<p>The code below splits the phrase by empty spaces (remember that <code class=\"language-text\">\\s</code> is equivalent  to <code class=\"language-text\">[\\r\\n\\t\\f\\v ]</code>)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RegexSplit</span> <span class=\"token punctuation\">{</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">String</span> phrase <span class=\"token operator\">=</span> <span class=\"token string\">\"What,\\tso everyoneâ€™s supposed to sleep every single night now?\\n\"</span> <span class=\"token operator\">+</span>\n              <span class=\"token string\">\"You realize that nighttime makes up half of all time?\"</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> words <span class=\"token operator\">=</span> phrase<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\s\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> word <span class=\"token operator\">:</span> words<span class=\"token punctuation\">)</span>\n         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"output\"><pre class=\"language-output\"><code class=\"language-output\">What,\nso\neveryoneâ€™s\nsupposed\nto\n... continues</code></pre></div>\n<h2 id=\"replacing-string-segments-using-regular-expressions\" style=\"position:relative;\"><a href=\"#replacing-string-segments-using-regular-expressions\" aria-label=\"replacing string segments using regular expressions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Replacing string segments using regular expressions</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RegexReplace</span> <span class=\"token punctuation\">{</span>\n   \n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">String</span> phrase <span class=\"token operator\">=</span> <span class=\"token string\">\"What, so everyoneâ€™s supposed to sleep every single night now? \"</span> <span class=\"token operator\">+</span>\n\t\t\t\t<span class=\"token string\">\"You realize that nighttime makes up half of all time?\"</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token class-name\">String</span> replacedFirst <span class=\"token operator\">=</span> phrase<span class=\"token punctuation\">.</span><span class=\"token function\">replaceFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\b\\\\w{3}\\\\b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"333\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>replacedFirst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">String</span> replacedAll <span class=\"token operator\">=</span> phrase<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\b\\\\w{3}\\\\b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"333\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>replacedAll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">String</span> noPunctuation <span class=\"token operator\">=</span> phrase<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[\\\\.,'â€™!?\\\\-]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>noPunctuation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"output\"><pre class=\"language-output\"><code class=\"language-output\">What, so everyoneâ€™s supposed to sleep every single night 333? You realize that nighttime makes up half of all time?\nWhat, so everyoneâ€™s supposed to sleep every single night 333? 333 realize that nighttime makes up half of 333 time?\nWhat so everyones supposed to sleep every single night now You realize that nighttime makes up half of all time</code></pre></div>\n<h2 id=\"grouping-and-back-reference\" style=\"position:relative;\"><a href=\"#grouping-and-back-reference\" aria-label=\"grouping and back reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Grouping and back reference</h2>\n<p>You can group parts of your regular expression by using parenthesis: <code class=\"language-text\">()</code></p>\n<p>This allows you to assign a repetition operator to a complete group:</p>\n<div class=\"gatsby-highlight\" data-language=\"output\"><pre class=\"language-output\"><code class=\"language-output\">(abc){3} </code></pre></div>\n<p>The regex above matches <code class=\"language-text\">abcabcabc</code></p>\n<p>Groups create a <strong>back reference</strong> to part of the regular expression</p>\n<p>A back reference stores the part of the String which matched the group</p>\n<p>It allows you to use this part in the <strong>replacement</strong></p>\n<p>Via the dollar sign <code class=\"language-text\">$</code> you can refer to a group.</p>\n<p>$1 is the first group, $2 the second, etc.</p>\n<h2 id=\"replacing-string-segments-using-back-references\" style=\"position:relative;\"><a href=\"#replacing-string-segments-using-back-references\" aria-label=\"replacing string segments using back references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Replacing string segments using back references</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RegexReplaceGroup</span> <span class=\"token punctuation\">{</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"The windows are open. The apples are green.\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(\\\\w+)s\\\\s+are\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"$1 is\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"output\"><pre class=\"language-output\"><code class=\"language-output\">The window is open. The apple is green.</code></pre></div>\n<h2 id=\"grouping-and-back-reference-1\" style=\"position:relative;\"><a href=\"#grouping-and-back-reference-1\" aria-label=\"grouping and back reference 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Grouping and back reference</h2>\n<p>You can refer to a group in a regex itself</p>\n<p>The regex below matches repeated letters:</p>\n<p><code class=\"language-text\">([a-z])\\1</code></p>\n<p>If ran against string <code class=\"language-text\">\"My email address is tiago.princesales@unibz.it\"</code>, the regex matches:</p>\n<ul>\n<li><code class=\"language-text\">dd</code></li>\n<li><code class=\"language-text\">ss</code></li>\n</ul>\n<h2 id=\"exercise-1\" style=\"position:relative;\"><a href=\"#exercise-1\" aria-label=\"exercise 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exercise 1</h2>\n<ol>\n<li>\n<p>Write a program that transforms a comma-separated-value string into a semi-colon-separated-value string. Given the following input:</p>\n<div class=\"gatsby-highlight\" data-language=\"output\"><pre class=\"language-output\"><code class=\"language-output\">id,name,grade\n1,Rick,30\n2,Morty,18\n3,Summer,24</code></pre></div>\n<p>It should produce the following output:</p>\n<div class=\"gatsby-highlight\" data-language=\"output\"><pre class=\"language-output\"><code class=\"language-output\">id;name;grade\n1;Rick;30\n2;Morty;18\n3;Summer;24</code></pre></div>\n</li>\n</ol>\n<!-- \n## Solution\n\n```java\npublic class CsvTransformer {\n\n   public static void main(String[] args) {\n\n      String csv = \"id,name,grade\\n\" +\n                   \"1,Rick,30\\n\" +\n                   \"2,Morty,18\\n\" +\n                   \"3,Summer,24\";\n\n      String result = csv.replaceAll(\",\", \";\");\n      System.out.println(result);\n\n   }\n}\n```\n\n```output\nid;name;grade\n1;Rick;30\n2;Morty;18\n3;Summer;24\n``` -->\n<ol start=\"2\">\n<li>\n<p>Now, your output should have quotes for each value between semi-colons</p>\n<div class=\"gatsby-highlight\" data-language=\"output\"><pre class=\"language-output\"><code class=\"language-output\">&quot;id&quot;;&quot;name&quot;;&quot;grade&quot;\n&quot;1;&quot;Rick&quot;;&quot;30&quot;\n&quot;2&quot;;&quot;Morty&quot;;&quot;18&quot;\n&quot;3&quot;;&quot;Summer&quot;;&quot;24&quot;</code></pre></div>\n</li>\n</ol>\n<!-- ## Solution\n\n```java\npublic class CsvTransformer {\n\n   public static void main(String[] args) {\n\n      String csv = \"id,name,grade\\n\" +\n                   \"1,Rick,30\\n\" +\n                   \"2,Morty,18\\n\" +\n                   \"3,Summer,24\";\n\n      String semiColonCsv = csv.replaceAll(\",\", \";\");\n      System.out.println(semiColonCsv + \"\\n\");\n\n      String quotedCsv = semiColonCsv.replaceAll(\"(\\\\w+)\",\"\\\"$1\\\"\");\n      System.out.println(quotedCsv);\n\n   }\n}\n```\n\n```output\nid;name;grade\n1;Rick;30\n2;Morty;18\n3;Summer;24\n\n\"id\";\"name\";\"grade\"\n\"1\";\"Rick\";\"30\"\n\"2\";\"Morty\";\"18\"\n\"3\";\"Summer\";\"24\"\n``` -->\n<h2 id=\"exercise-2\" style=\"position:relative;\"><a href=\"#exercise-2\" aria-label=\"exercise 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exercise 2</h2>\n<p>Using regular expressions, remove all tags from the HTML string below:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span><span class=\"token punctuation\">></span></span>Rick and Morty<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span>\n  is an American\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/wiki/Adult_animation<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Adult animation<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>adult animated<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/wiki/Science_fiction<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Science fiction<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>science fiction<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/wiki/Animated_sitcom<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Animated sitcom<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>sitcom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span> created by\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/wiki/Justin_Roiland<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Justin Roiland<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Justin Roiland<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span> and\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/wiki/Dan_Harmon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Dan Harmon<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Dan Harmon<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span> for\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/wiki/Cartoon_Network<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Cartoon Network<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Cartoon Network<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>'s late-night programming block\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/wiki/Adult_Swim<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Adult Swim<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Adult Swim<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>.\n  The series follows the misadventures of cynical\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/wiki/Mad_scientist<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Mad scientist<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>mad scientist<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/wiki/Rick_Sanchez_(Rick_and_Morty)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Rick Sanchez (Rick and Morty)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Rick Sanchez<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n  and his good-hearted but fretful grandson\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/wiki/Morty_Smith<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Morty Smith<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Morty Smith<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>,\n  who split their time between domestic life and interdimensional adventures.\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<!-- \n## Solution\n\n```java\npublic class HTMLSanitize {\n   public static void main(String[] args) {\n      String html = \"<p>\\n\" +\n              \"<i><b>Rick and Morty</b></i>\\n\" +\n              \"is an American\\n\" +\n              \"<a href=\\\"/wiki/Adult_animation\\\" title=\\\"Adult animation\\\">adult animated</a>\\n\" +\n              \"<a href=\\\"/wiki/Science_fiction\\\" title=\\\"Science fiction\\\">science fiction</a>\\n\" +\n              \"<a href=\\\"/wiki/Animated_sitcom\\\" title=\\\"Animated sitcom\\\">sitcom</a> created by\\n\" +\n              \"<a href=\\\"/wiki/Justin_Roiland\\\" title=\\\"Justin Roiland\\\">Justin Roiland</a> and\\n\" +\n              \"<a href=\\\"/wiki/Dan_Harmon\\\" title=\\\"Dan Harmon\\\">Dan Harmon</a> for\\n\" +\n              \"<a href=\\\"/wiki/Cartoon_Network\\\" title=\\\"Cartoon Network\\\">Cartoon Network</a>'s late-night programming block\\n\" +\n              \"<a href=\\\"/wiki/Adult_Swim\\\" title=\\\"Adult Swim\\\">Adult Swim</a>.\\n\" +\n              \"The series follows the misadventures of cynical\\n\" +\n              \"<a href=\\\"/wiki/Mad_scientist\\\" title=\\\"Mad scientist\\\">mad scientist</a>\\n\" +\n              \"<a href=\\\"/wiki/Rick_Sanchez_(Rick_and_Morty)\\\" title=\\\"Rick Sanchez (Rick and Morty)\\\">Rick Sanchez</a>\\n\" +\n              \"and his good-hearted but fretful grandson\\n\" +\n              \"<a href=\\\"/wiki/Morty_Smith\\\" title=\\\"Morty Smith\\\">Morty Smith</a>,\\n\" +\n              \"who split their time between domestic life and interdimensional adventures.\\n\" +\n              \"</p>\";\n\n      String noTags = html.replaceAll(\"<.+?>\", \"\");\n      String noLineBreaks = noTags.replaceAll(\"([^\\\\.])\\n\", \"$1 \");\n      System.out.println(noLineBreaks);\n   }\n}\n```\n\n```output\nRick and Morty is an American adult animated science fiction sitcom created by Justin Roiland and Dan Harmon \nfor Cartoon Network's late-night programming block Adult Swim.\nThe series follows the misadventures of cynical mad scientist Rick Sanchez and his good-hearted but fretful \ngrandson Morty Smith, who split their time between domestic life and interdimensional adventures.\n``` -->\n<h2 id=\"lets-practice-writing-regular-expressions\" style=\"position:relative;\"><a href=\"#lets-practice-writing-regular-expressions\" aria-label=\"lets practice writing regular expressions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Let's practice writing regular expressions?</h2>\n<p>Here are some games that can help you practice regular expressions:</p>\n<ul>\n<li><a href=\"http://play.inginf.units.it\">RegexPlay</a></li>\n<li><a href=\"https://regexcrossword.com/\">Regex Crossword</a></li>\n<li><a href=\"https://alf.nu/RegexGolf\">Regex Golf</a></li>\n<li><a href=\"https://regexone.com/\">Regex One</a></li>\n</ul>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<p>Part of the material has been taken from the following sources. The usage of the referenced copyrighted work is in line with fair use since it is for nonprofit educational purposes.</p>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/essential/regex/intro.html\">https://docs.oracle.com/javase/tutorial/essential/regex/intro.html</a></li>\n<li><a href=\"http://www.regular-expressions.info/tutorial.html\">http://www.regular-expressions.info/tutorial.html</a></li>\n<li><a href=\"http://www.vogella.com/tutorials/JavaRegularExpressions/article.html\">http://www.vogella.com/tutorials/JavaRegularExpressions/article.html</a></li>\n<li><a href=\"https://www.tutorialspoint.com/java/java_regular_expressions.htm\">https://www.tutorialspoint.com/java/java_regular_expressions.htm</a></li>\n<li><a href=\"http://www.javatpoint.com/java-regex\">http://www.javatpoint.com/java-regex</a></li>\n<li><a href=\"http://www.ocpsoft.org/opensource/guide-to-regular-expressions-in-java-part-1/\">http://www.ocpsoft.org/opensource/guide-to-regular-expressions-in-java-part-1/</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1788796/what-is-parsing\">http://stackoverflow.com/questions/1788796/what-is-parsing</a></li>\n</ul>","frontmatter":{"slug":"/regex/regex-string","title":"Using Regular Expressions in String Methods","course":"Programming Project 2021/22","previous":"/regex/writing","next":"/regex/api","chapter":14,"section":3,"module":"Regular Expressions","banner":null}}},"pageContext":{"slug":"/regex/regex-string"}},
    "staticQueryHashes": ["800307450"]}