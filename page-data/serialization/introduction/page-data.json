{
    "componentChunkName": "component---src-templates-template-js",
    "path": "/serialization/introduction",
    "result": {"data":{"markdownRemark":{"html":"<p>When data is saved to a file or transmitted over a network, it must be represented somehow.</p>\n<p>We want to represent it in a way that allows us to rebuilt it later, when the file is read or the transmission is received.</p>\n<p>There are two main groups of file serialization formats:</p>\n<ul>\n<li>Binary:\n<ul>\n<li>Protocol Buffers: <a href=\"https://developers.google.com/protocol-buffers\">https://developers.google.com/protocol-buffers</a></li>\n<li>BSON: <a href=\"http://bsonspec.org/\">http://bsonspec.org/</a></li>\n<li>MessagePack: <a href=\"https://msgpack.org/\">https://msgpack.org/</a></li>\n</ul>\n</li>\n<li>Character-based:\n<ul>\n<li>CSV: <a href=\"https://en.wikipedia.org/wiki/Comma-separated_values\">https://en.wikipedia.org/wiki/Comma-separated_values</a></li>\n<li>XML: <a href=\"https://www.w3schools.com/xml/default.asp\">https://www.w3schools.com/xml/default.asp</a></li>\n<li>JSON: <a href=\"https://www.json.org/\">https://www.json.org/</a></li>\n<li>YAML: <a href=\"https://yaml.org/\">https://yaml.org/</a></li>\n</ul>\n</li>\n</ul>\n<p>You can find a more complete list at <a href=\"https://en.wikipedia.org/wiki/Comparison_of_data-serialization_formats\">https://en.wikipedia.org/wiki/Comparison_of_data-serialization_formats</a></p>\n<p>As is often the case in Computer Science (and in life) there is no absolutely better option. <em>There is the right tool for the right job!</em></p>\n<h2 id=\"character-based-formats\" style=\"position:relative;\"><a href=\"#character-based-formats\" aria-label=\"character based formats permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Character-based formats</h2>\n<p>There are good reasons to use character-based serialization formats:</p>\n<ul>\n<li>You can actually read files</li>\n<li>You can write them without any additional tools</li>\n<li>The formats are simpler to implement and work with</li>\n</ul>\n<p>Their main disadvantages are:</p>\n<ul>\n<li>They are usually a lot larger</li>\n<li>Manipulating data specified in them may be inefficient if compared to binary-based alternatives</li>\n</ul>\n<p>That is why some database systems accept data in JSON, but store them in BSON (e.g. <a href=\"https://www.mongodb.com/json-and-bson\">MongoDB</a>)</p>\n<p><a href=\"https://www.stat.auckland.ac.nz/~paul/ItDT/HTML/node38.htmls\">Source</a></p>","frontmatter":{"slug":"/serialization/introduction","title":"Introduction","course":"Programming Project 2021/22","previous":"/io/writing","next":"/serialization/csv","chapter":17,"section":1,"module":"Serialization","banner":null}}},"pageContext":{"slug":"/serialization/introduction"}},
    "staticQueryHashes": ["800307450"]}