{
    "componentChunkName": "component---src-templates-template-js",
    "path": "/serialization/csv",
    "result": {"data":{"markdownRemark":{"html":"<p><a href=\"https://en.wikipedia.org/wiki/Comma-separated_values\"><strong>Comma-separated values</strong></a> (CSV) is a serialization format that has been used for exchanging and converting data between various spreadsheet programs for quite some time.</p>\n<p>It can be described quite succinctly:</p>\n<ul>\n<li>Each line is a record</li>\n<li>Each record consists of one or more fields</li>\n<li>Fields are separated by commas (hence the name)</li>\n</ul>\n<p><strong>Other separators</strong> are also used in practice:</p>\n<ul>\n<li>semicolon</li>\n<li>tab</li>\n<li>space</li>\n</ul>\n<h2 id=\"example\" style=\"position:relative;\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h2>\n<p>This is what CSV data looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"csv\"><pre class=\"language-csv\"><code class=\"language-csv\"><span class=\"token value\">id</span><span class=\"token punctuation\">,</span><span class=\"token value\">R</span><span class=\"token punctuation\">,</span><span class=\"token value\">G</span><span class=\"token punctuation\">,</span><span class=\"token value\">B</span><span class=\"token punctuation\">,</span><span class=\"token value\">color</span>\n<span class=\"token value\">1</span><span class=\"token punctuation\">,</span><span class=\"token value\">105</span><span class=\"token punctuation\">,</span><span class=\"token value\">30</span><span class=\"token punctuation\">,</span><span class=\"token value\">255</span><span class=\"token punctuation\">,</span><span class=\"token value\">blue</span>\n<span class=\"token value\">2</span><span class=\"token punctuation\">,</span><span class=\"token value\">255</span><span class=\"token punctuation\">,</span><span class=\"token value\">183</span><span class=\"token punctuation\">,</span><span class=\"token value\">17</span><span class=\"token punctuation\">,</span><span class=\"token value\">orange</span>\n<span class=\"token value\">3</span><span class=\"token punctuation\">,</span><span class=\"token value\">255</span><span class=\"token punctuation\">,</span><span class=\"token value\">53</span><span class=\"token punctuation\">,</span><span class=\"token value\">221</span><span class=\"token punctuation\">,</span><span class=\"token value\">violet</span>\n<span class=\"token value\">4</span><span class=\"token punctuation\">,</span><span class=\"token value\">244</span><span class=\"token punctuation\">,</span><span class=\"token value\">254</span><span class=\"token punctuation\">,</span><span class=\"token value\">100</span><span class=\"token punctuation\">,</span><span class=\"token value\">yellow</span>\n<span class=\"token value\">5</span><span class=\"token punctuation\">,</span><span class=\"token value\">251</span><span class=\"token punctuation\">,</span><span class=\"token value\">255</span><span class=\"token punctuation\">,</span><span class=\"token value\">48</span><span class=\"token punctuation\">,</span><span class=\"token value\">yellow</span>\n<span class=\"token value\">6</span><span class=\"token punctuation\">,</span><span class=\"token value\">158</span><span class=\"token punctuation\">,</span><span class=\"token value\">255</span><span class=\"token punctuation\">,</span><span class=\"token value\">155</span><span class=\"token punctuation\">,</span><span class=\"token value\">green</span>\n<span class=\"token value\">7</span><span class=\"token punctuation\">,</span><span class=\"token value\">255</span><span class=\"token punctuation\">,</span><span class=\"token value\">106</span><span class=\"token punctuation\">,</span><span class=\"token value\">108</span><span class=\"token punctuation\">,</span><span class=\"token value\">red</span>\n<span class=\"token value\">8</span><span class=\"token punctuation\">,</span><span class=\"token value\">159</span><span class=\"token punctuation\">,</span><span class=\"token value\">150</span><span class=\"token punctuation\">,</span><span class=\"token value\">255</span><span class=\"token punctuation\">,</span><span class=\"token value\">blue</span>\n<span class=\"token value\">9</span><span class=\"token punctuation\">,</span><span class=\"token value\">71</span><span class=\"token punctuation\">,</span><span class=\"token value\">228</span><span class=\"token punctuation\">,</span><span class=\"token value\">109</span><span class=\"token punctuation\">,</span><span class=\"token value\">green</span>\n<span class=\"token value\">10</span><span class=\"token punctuation\">,</span><span class=\"token value\">255</span><span class=\"token punctuation\">,</span><span class=\"token value\">45</span><span class=\"token punctuation\">,</span><span class=\"token value\">178</span><span class=\"token punctuation\">,</span><span class=\"token value\">violet</span>\n<span class=\"token value\">11</span><span class=\"token punctuation\">,</span><span class=\"token value\">120</span><span class=\"token punctuation\">,</span><span class=\"token value\">255</span><span class=\"token punctuation\">,</span><span class=\"token value\">30</span><span class=\"token punctuation\">,</span><span class=\"token value\">green</span>\n<span class=\"token value\">12</span><span class=\"token punctuation\">,</span><span class=\"token value\">214</span><span class=\"token punctuation\">,</span><span class=\"token value\">50</span><span class=\"token punctuation\">,</span><span class=\"token value\">250</span><span class=\"token punctuation\">,</span><span class=\"token value\">violet</span>\n<span class=\"token value\">13</span><span class=\"token punctuation\">,</span><span class=\"token value\">255</span><span class=\"token punctuation\">,</span><span class=\"token value\">176</span><span class=\"token punctuation\">,</span><span class=\"token value\">40</span><span class=\"token punctuation\">,</span><span class=\"token value\">orange</span>\n<span class=\"token value\">14</span><span class=\"token punctuation\">,</span><span class=\"token value\">255</span><span class=\"token punctuation\">,</span><span class=\"token value\">79</span><span class=\"token punctuation\">,</span><span class=\"token value\">79</span><span class=\"token punctuation\">,</span><span class=\"token value\">red</span>\n<span class=\"token value\">15</span><span class=\"token punctuation\">,</span><span class=\"token value\">255</span><span class=\"token punctuation\">,</span><span class=\"token value\">162</span><span class=\"token punctuation\">,</span><span class=\"token value\">22</span><span class=\"token punctuation\">,</span><span class=\"token value\">orange</span>\n<span class=\"token value\">16</span><span class=\"token punctuation\">,</span><span class=\"token value\">255</span><span class=\"token punctuation\">,</span><span class=\"token value\">247</span><span class=\"token punctuation\">,</span><span class=\"token value\">114</span><span class=\"token punctuation\">,</span><span class=\"token value\">yellow</span>\n<span class=\"token value\">17</span><span class=\"token punctuation\">,</span><span class=\"token value\">61</span><span class=\"token punctuation\">,</span><span class=\"token value\">180</span><span class=\"token punctuation\">,</span><span class=\"token value\">254</span><span class=\"token punctuation\">,</span><span class=\"token value\">blue</span>\n<span class=\"token value\">18</span><span class=\"token punctuation\">,</span><span class=\"token value\">255</span><span class=\"token punctuation\">,</span><span class=\"token value\">97</span><span class=\"token punctuation\">,</span><span class=\"token value\">12</span><span class=\"token punctuation\">,</span><span class=\"token value\">red</span></code></pre></div>\n<h2 id=\"ietf-rfc-4180\" style=\"position:relative;\"><a href=\"#ietf-rfc-4180\" aria-label=\"ietf rfc 4180 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IETF RFC 4180</h2>\n<p>CSV has never been officially standardized:</p>\n<ul>\n<li>What to do if the field contains commas?</li>\n<li>Or line breaks?</li>\n</ul>\n<p>Back in 2005, a request for comment (RFC) was published by the <a href=\"https://www.ietf.org/\">Internet Engineering Task Force</a></p>\n<p><a href=\"https://tools.ietf.org/html/rfc4180\">RFC 4180</a>:</p>\n<ul>\n<li>Proposes a specification for the CSV format</li>\n<li>It is often what people assume as the CSV's definition</li>\n</ul>\n<p>RFC 4180 is <strong>not a standard</strong>:</p>\n<blockquote>\n<p>This memo provides information for the Internet community.  It does not specify an Internet standard of any kind.  Distribution of this memo is unlimited.</p>\n</blockquote>\n<h2 id=\"csv-specification\" style=\"position:relative;\"><a href=\"#csv-specification\" aria-label=\"csv specification permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSV Specification</h2>\n<ol>\n<li>\n<p>Each record is located on a separate line, delimited by a line break (CRLF).</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"output\"><pre class=\"language-output\"><code class=\"language-output\">aaa,bbb,ccc CRLF\nzzz,yyy,xxx CRLF</code></pre></div>\n</li>\n<li>\n<p>The last record in the file may or may not have an ending line break.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"output\"><pre class=\"language-output\"><code class=\"language-output\">aaa,bbb,ccc CRLF\nzzz,yyy,xxx</code></pre></div>\n</li>\n<li>\n<p>There may be an optional header line appearing as the first line of the file with the same format as normal record lines. This header will <em>contain names corresponding to the fields</em> in the file and <em>should contain the same number of fields as the records</em> in the rest of the file</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"output\"><pre class=\"language-output\"><code class=\"language-output\">field_name,field_name,field_name CRLF\naaa,bbb,ccc CRLF\nzzz,yyy,xxx CRLF</code></pre></div>\n</li>\n<li>\n<p>Within the header and each record, there may be one or more fields, separated by commas. Each line should contain the same number of fields throughout the file. Spaces are considered part of a field and should not be ignored. The last field in the record must not be followed by a comma.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"output\"><pre class=\"language-output\"><code class=\"language-output\">aaa,bbb,ccc</code></pre></div>\n</li>\n<li>\n<p>Each field may or may not be enclosed in double quotes (however some programs, such as Microsoft Excel, do not use double quotes at all).  If fields are not enclosed with double quotes, then double quotes may not appear inside the fields.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"output\"><pre class=\"language-output\"><code class=\"language-output\">&quot;aaa&quot;,&quot;bbb&quot;,&quot;ccc&quot; CRLF\nzzz,yyy,xxx</code></pre></div>\n</li>\n<li>\n<p>Fields containing line breaks (CRLF), double quotes, and commas should be enclosed in double-quotes.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"output\"><pre class=\"language-output\"><code class=\"language-output\">&quot;aaa&quot;,&quot;b CRLF\n   bb&quot;,&quot;ccc&quot; CRLF\nzzz,yyy,xxx</code></pre></div>\n</li>\n<li>\n<p>If double-quotes are used to enclose fields, then a double-quote appearing inside a field must be escaped by preceding it with another double quote.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"output\"><pre class=\"language-output\"><code class=\"language-output\">&quot;aaa&quot;,&quot;b&quot;&quot;bb&quot;,&quot;ccc&quot;</code></pre></div>\n</li>\n</ol>\n<h2 id=\"csv-in-the-real-world\" style=\"position:relative;\"><a href=\"#csv-in-the-real-world\" aria-label=\"csv in the real world permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSV in the real world</h2>\n<p>In popular usage, \"CSV\" is not a single, well-defined format. As a result, in practice, the term \"CSV\" might refer to any file that:</p>\n<ul>\n<li>is plain text using a character set such as ASCII or UTF-8</li>\n<li>consists of records, typically one per line</li>\n<li>records are divided into fields separated by delimiters\n<ul>\n<li>typically a single reserved character such as comma, semicolon, or tab;</li>\n<li>sometimes the delimiter may include optional spaces</li>\n</ul>\n</li>\n<li>every record has the same sequence of fields</li>\n</ul>\n<p>Within these general constraints, many variations are in use.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Comma-separated_values\">Source</a></p>\n<h2 id=\"example-1\" style=\"position:relative;\"><a href=\"#example-1\" aria-label=\"example 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h2>\n<p>The tabular data below:</p>\n<table>\n<thead>\n<tr>\n<th>Year</th>\n<th>Make</th>\n<th>Model</th>\n<th>Description</th>\n<th>Price</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1997</td>\n<td>Ford</td>\n<td>E350</td>\n<td>ac, abs, moon</td>\n<td>3000.00</td>\n</tr>\n<tr>\n<td>1999</td>\n<td>Chevy</td>\n<td>Venture \"Extended Edition\"</td>\n<td></td>\n<td>4900.00</td>\n</tr>\n<tr>\n<td>1999</td>\n<td>Chevy</td>\n<td>Venture \"Extended Edition, Very Large\"</td>\n<td></td>\n<td>5000.00</td>\n</tr>\n<tr>\n<td>1996</td>\n<td>Jeep</td>\n<td>Grand Cherokee</td>\n<td>MUST SELL!air, moon roof, loaded</td>\n<td>4799.00</td>\n</tr>\n</tbody>\n</table>\n<p>Is represented in CSV as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"csv\"><pre class=\"language-csv\"><code class=\"language-csv\"><span class=\"token value\">Year</span><span class=\"token punctuation\">,</span><span class=\"token value\">Make</span><span class=\"token punctuation\">,</span><span class=\"token value\">Model</span><span class=\"token punctuation\">,</span><span class=\"token value\">Description</span><span class=\"token punctuation\">,</span><span class=\"token value\">Price</span>\n<span class=\"token value\">1997</span><span class=\"token punctuation\">,</span><span class=\"token value\">Ford</span><span class=\"token punctuation\">,</span><span class=\"token value\">E350</span><span class=\"token punctuation\">,</span><span class=\"token value\">\"ac, abs, moon\"</span><span class=\"token punctuation\">,</span><span class=\"token value\">3000.00</span>\n<span class=\"token value\">1999</span><span class=\"token punctuation\">,</span><span class=\"token value\">Chevy</span><span class=\"token punctuation\">,</span><span class=\"token value\">\"Venture \"\"Extended Edition\"\"\"</span><span class=\"token punctuation\">,</span><span class=\"token value\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token value\">4900.00</span>\n<span class=\"token value\">1999</span><span class=\"token punctuation\">,</span><span class=\"token value\">Chevy</span><span class=\"token punctuation\">,</span><span class=\"token value\">\"Venture \"\"Extended Edition, Very Large\"\"\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token value\">5000.00</span>\n<span class=\"token value\">1996</span><span class=\"token punctuation\">,</span><span class=\"token value\">Jeep</span><span class=\"token punctuation\">,</span><span class=\"token value\">Grand Cherokee</span><span class=\"token punctuation\">,</span><span class=\"token value\">\"MUST SELL!air, moon roof, loaded\"</span><span class=\"token punctuation\">,</span><span class=\"token value\">4799.00</span></code></pre></div>\n<p>Note how we dealt with:</p>\n<ul>\n<li>missing values (line 4)</li>\n<li>quotes <code class=\"language-text\">\"</code> in the values (lines 3 and 4)</li>\n<li>commas within the values (lines 2, 4 and 5)</li>\n</ul>\n<h2 id=\"decimal-delimiter\" style=\"position:relative;\"><a href=\"#decimal-delimiter\" aria-label=\"decimal delimiter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decimal delimiter</h2>\n<ul>\n<li>\n<p>USA/UK CSV:</p>\n<div class=\"gatsby-highlight\" data-language=\"output\"><pre class=\"language-output\"><code class=\"language-output\">Year,Make,Model,Length\n1997,Ford,E350,2.34\n2000,Mercury,Cougar,2.38</code></pre></div>\n</li>\n<li>\n<p>European CSV:</p>\n<div class=\"gatsby-highlight\" data-language=\"output\"><pre class=\"language-output\"><code class=\"language-output\">Year;Make;Model;Length\n1997;Ford;E350;2,34\n2000;Mercury;Cougar;2,38</code></pre></div>\n</li>\n</ul>\n<h2 id=\"parsing\" style=\"position:relative;\"><a href=\"#parsing\" aria-label=\"parsing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parsing</h2>\n<p>Parsing is the process of transforming input data (usually text) into a data structure:</p>\n<ul>\n<li>single-variable (int, float, String, etc.)</li>\n<li>tree</li>\n<li>array (List, Map, Set, etc.)</li>\n</ul>\n<p><img src=\"../../figures/Parsing_Example.png\" alt=\"\"></p>\n<h2 id=\"parsing-csv-files\" style=\"position:relative;\"><a href=\"#parsing-csv-files\" aria-label=\"parsing csv files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parsing CSV files</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token string\">\"1.0.0.0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1.0.0.255\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"16777216\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"16777471\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"AU\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Australia\"</span>\n<span class=\"token string\">\"1.0.1.0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1.0.3.255\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"16777472\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"16778239\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"CN\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"China\"</span>\n<span class=\"token string\">\"1.0.4.0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1.0.7.255\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"16778240\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"16779263\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"AU\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Australia\"</span>\n<span class=\"token string\">\"1.0.8.0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1.0.15.255\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"16779264\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"16781311\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"CN\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"China\"</span>\n<span class=\"token string\">\"1.0.16.0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1.0.31.255\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"16781312\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"16785407\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"JP\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Japan\"</span>\n<span class=\"token string\">\"1.0.32.0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1.0.63.255\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"16785408\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"16793599\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"CN\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"China\"</span>\n<span class=\"token string\">\"1.0.64.0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1.0.127.255\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"16793600\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"16809983\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"JP\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Japan\"</span>\n<span class=\"token string\">\"1.0.128.0\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1.0.255.255\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"16809984\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"16842751\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"TH\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Thailand\"</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> csvFile <span class=\"token operator\">=</span> <span class=\"token string\">\"./src/test.csv\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> line <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> separator <span class=\"token operator\">=</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span>csvFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// use comma as separator</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> token <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Country [code= \"</span> <span class=\"token operator\">+</span> token<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" , name=\"</span> <span class=\"token operator\">+</span> token<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"output\"><pre class=\"language-output\"><code class=\"language-output\">Country [code= &quot;AU&quot; , name=&quot;Australia&quot;]\nCountry [code= &quot;CN&quot; , name=&quot;China&quot;]\nCountry [code= &quot;AU&quot; , name=&quot;Australia&quot;]\nCountry [code= &quot;CN&quot; , name=&quot;China&quot;]\nCountry [code= &quot;JP&quot; , name=&quot;Japan&quot;]\nCountry [code= &quot;CN&quot; , name=&quot;China&quot;]\nCountry [code= &quot;JP&quot; , name=&quot;Japan&quot;]\nCountry [code= &quot;TH&quot; , name=&quot;Thailand&quot;]</code></pre></div>\n<h2 id=\"exercise-1\" style=\"position:relative;\"><a href=\"#exercise-1\" aria-label=\"exercise 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exercise 1</h2>\n<p>In a text editor create a CSV file (<code class=\"language-text\">test.csv</code>) with the data below:</p>\n<div class=\"gatsby-highlight\" data-language=\"csv\"><pre class=\"language-csv\"><code class=\"language-csv\"><span class=\"token value\">1</span><span class=\"token punctuation\">,</span><span class=\"token value\">105</span><span class=\"token punctuation\">,</span><span class=\"token value\">30</span><span class=\"token punctuation\">,</span><span class=\"token value\">255</span><span class=\"token punctuation\">,</span><span class=\"token value\">blue</span>\n<span class=\"token value\">2</span><span class=\"token punctuation\">,</span><span class=\"token value\">255</span><span class=\"token punctuation\">,</span><span class=\"token value\">183</span><span class=\"token punctuation\">,</span><span class=\"token value\">17</span><span class=\"token punctuation\">,</span><span class=\"token value\">orange</span>\n<span class=\"token value\">3</span><span class=\"token punctuation\">,</span><span class=\"token value\">255</span><span class=\"token punctuation\">,</span><span class=\"token value\">53</span><span class=\"token punctuation\">,</span><span class=\"token value\">221</span><span class=\"token punctuation\">,</span><span class=\"token value\">violet</span>\n<span class=\"token value\">4</span><span class=\"token punctuation\">,</span><span class=\"token value\">244</span><span class=\"token punctuation\">,</span><span class=\"token value\">254</span><span class=\"token punctuation\">,</span><span class=\"token value\">100</span><span class=\"token punctuation\">,</span><span class=\"token value\">yellow</span>\n<span class=\"token value\">5</span><span class=\"token punctuation\">,</span><span class=\"token value\">251</span><span class=\"token punctuation\">,</span><span class=\"token value\">255</span><span class=\"token punctuation\">,</span><span class=\"token value\">48</span><span class=\"token punctuation\">,</span><span class=\"token value\">yellow</span></code></pre></div>\n<p>Using the previous example, write a program that, for each line, prints the sum of the values of the first two columns.</p>\n<!-- ## Solution\n\n```java\npublic class Runner {\n\n\tpublic static void main(String[] args) {\n\t\tString csvFile = \"./test.csv\";\n\t\tString line = \"\";\n\t\tString separator = \",\";\n\n\t\ttry (BufferedReader br = new BufferedReader(new FileReader(csvFile))) {\n\t\t    while ((line = br.readLine()) != null) {\n\t\t        String[] token = line.split(separator);\n\t\t        Integer a = Integer.valueOf(token[1])  ; \n\t\t        Integer b = Integer.valueOf(token[2])  ; \n\t\t        Integer sum  = a+b;\n\t\t        System.out.println(\"Sum= \" + sum);\n\t\t    }\n\t\t} catch (IOException e) {\n\t\t    e.printStackTrace();\n\t\t}\n\t}\n}\n\n``` -->\n<h2 id=\"exercise-2\" style=\"position:relative;\"><a href=\"#exercise-2\" aria-label=\"exercise 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exercise 2</h2>\n<p>Write a CSV parser that can handle:</p>\n<ul>\n<li>different separators</li>\n<li>separators within field values</li>\n<li>quotes within field values</li>\n</ul>\n<p>Follow the conventions defined in the <a href=\"https://tools.ietf.org/html/rfc4180\">RFC 4180</a>.</p>\n<!-- ## Solution\n\n```java\n\tpublic static List<String> parseLine(String cvsLine, char separators, char customQuote) {\n        List<String> result = new ArrayList<>();\n        StringBuffer curVal = new StringBuffer();\n        boolean inQuotes = false;\n        boolean startCollectChar = false;\n        boolean doubleQuotesInColumn = false;\n\n        char[] chars = cvsLine.toCharArray();\n\n        for (char ch : chars) {\n            if (inQuotes) {\n                startCollectChar = true;\n                if (ch == customQuote) {\n                    inQuotes = false;\n                    doubleQuotesInColumn = false;\n                } else {\n                    if (ch == '\\\"') {\n                        if (!doubleQuotesInColumn) {\n                            curVal.append(ch);\n                            doubleQuotesInColumn = true;\n                        }\n                    } else {\n                        curVal.append(ch);\n                    }\n                }             \n            } else {\n                if (ch == customQuote) {\n                    inQuotes = true;\n                    if (chars[0] != '\"' && customQuote == '\\\"') {\n                        curVal.append('\"');\n                    }\n                    if (startCollectChar) {\n                        curVal.append('\"');\n                    }\n                } else if (ch == separators) {\n                    result.add(curVal.toString());\n                    curVal = new StringBuffer();\n                    startCollectChar = false;\n                } else if (ch == '\\r') {\n                    //ignore LF characters\n                    continue;\n                } else if (ch == '\\n') {\n                    //the end, break!\n                    break;\n                } else {\n                    curVal.append(ch);\n                }\n            }\n        }\n        result.add(curVal.toString());\n        return result;\n\t}\n``` -->\n<h2 id=\"java-csv-parsers\" style=\"position:relative;\"><a href=\"#java-csv-parsers\" aria-label=\"java csv parsers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Java CSV Parsers</h2>\n<p>You don't have to write your own CSV parser, as there are several available:</p>\n<ul>\n<li><strong>Apache Commons CSV</strong>: <a href=\"http://commons.apache.org/proper/commons-csv/user-guide.html\">http://commons.apache.org/proper/commons-csv/user-guide.html</a></li>\n<li><strong>opencsv</strong>: <a href=\"http://opencsv.sourceforge.net/\">http://opencsv.sourceforge.net/</a></li>\n<li><strong>Super CSV</strong>: <a href=\"https://super-csv.github.io/super-csv/\">https://super-csv.github.io/super-csv/</a></li>\n<li><strong>Jackson Dataformat CSV</strong>: <a href=\"https://github.com/FasterXML/jackson-dataformats-text\">https://github.com/FasterXML/jackson-dataformats-text</a></li>\n</ul>\n<!-- - Exercise: \n  - Pick one of the parsers above\n  - Create a new Maven project and declare its latest release as a dependency\n  - Redo the examples in the previous slides\n  - For each example, use the parsers to write similar data to another file -->","frontmatter":{"slug":"/serialization/csv","title":"CSV","course":"Programming Project 2021/22","previous":"/serialization/introduction","next":"/serialization/json","chapter":17,"section":2,"module":"Serialization","banner":null}}},"pageContext":{"slug":"/serialization/csv"}},
    "staticQueryHashes": ["800307450"]}